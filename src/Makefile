# Makefile.in generated by automake 1.7.9 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/marsyas
pkglibdir = $(libdir)/marsyas
pkgincludedir = $(includedir)/marsyas
top_builddir = ..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/gtzan/src/c++/svnmarsyas/marsyas/config/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/gtzan/src/c++/svnmarsyas/marsyas/config/missing --run tar
AUTOCONF = ${SHELL} /home/gtzan/src/c++/svnmarsyas/marsyas/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/gtzan/src/c++/svnmarsyas/marsyas/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/gtzan/src/c++/svnmarsyas/marsyas/config/missing --run automake-1.7
AWK = gawk
Audio = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3 -Wall
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISTRIBUTED = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EXEEXT = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
Includes = 
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
Libs = -lpthread -lasound 
MADLIB = 
MAKEINFO = ${SHELL} /home/gtzan/src/c++/svnmarsyas/marsyas/config/missing --run makeinfo
MRSSWIG = 
MslLibs = 
OBJEXT = o
PACKAGE = marsyas
PACKAGE_BUGREPORT = gtzan@cs.uvic.ca
PACKAGE_NAME = marsyas
PACKAGE_STRING = marsyas 0.2.6
PACKAGE_TARNAME = marsyas
PACKAGE_VERSION = 0.2.6
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.2.6
ac_aux_dir = config
ac_ct_CC = gcc
ac_ct_CXX = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/gtzan/src/c++/svnmarsyas/marsyas/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
subdirs = 
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc

SUBDIRS = plugins tcl

MAINTAINERCLEANFILES = Makefile.in

EXTRA_DIST = tests.txt pvocJazz pvoc.bat dha2dhin2.txt netExtract.ms pvoc.ms

INCLUDES = -I$(top_builddir) -I$(top_builddir)/marsyas \
                -I$(top_srcdir) -I$(top_srcdir)/marsyas -I$(Includes)


bin_PROGRAMS = sfinfo sfplugin sfplay extract bextract \
		  mkcollection phasevocoder \
		  pitchextract sfplaygui tempo \
		  server textract msl tutorial \
		  ERBTest marsyasTests \
		  SeneffEarTest record \
		  drumExtract mixer mugle classifyFile midiTest \
		  LPCExample 


sfinfo_SOURCES = sfinfo.cpp 
sfinfo_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


sfplay_SOURCES = sfplay.cpp 
sfplay_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


tutorial_SOURCES = tutorial.cpp 
tutorial_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     	$(Libs)


tempo_SOURCES = tempo.cpp 
tempo_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


sfplugin_SOURCES = sfplugin.cpp 
sfplugin_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


phasevocoder_SOURCES = phasevocoder.cpp 
phasevocoder_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


pitchextract_SOURCES = pitchextract.cpp 
pitchextract_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
			   $(Libs)


extract_SOURCES = extract.cpp 
extract_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		       $(Libs)


bextract_SOURCES = bextract.cpp 
bextract_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		  	$(Libs)


sfplaygui_SOURCES = sfplaygui.cpp 
sfplaygui_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
			$(Libs)


mkcollection_SOURCES = mkcollection.cpp 
mkcollection_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
			$(Libs)


server_SOURCES = server_main.cpp 
server_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
			$(Libs)


textract_SOURCES = textract.cpp 
textract_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
			$(Libs)


msl_SOURCES = msl.cpp 
msl_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
			$(Libs) $(MslLibs)


ERBTest_SOURCES = ERBTest.cpp
ERBTest_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
			$(Libs)


marsyasTests_SOURCES = marsyasTests.cpp 
marsyasTests_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


SeneffEarTest_SOURCES = SeneffEarTest.cpp 
SeneffEarTest_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


record_SOURCES = record.cpp 
record_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


drumExtract_SOURCES = drumExtract.cpp 
drumExtract_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		     $(Libs)


mixer_SOURCES = mixer.cpp 
mixer_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		    $(Libs)


mugle_SOURCES = mugle.cpp 
mugle_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		    $(Libs)


classifyFile_SOURCES = classifyFile.cpp 
classifyFile_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		    $(Libs)


midiTest_SOURCES = midiTest.cpp 
midiTest_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		    $(Libs)


LPCExample_SOURCES = LPCExample.cpp 
LPCExample_LDADD = $(top_builddir)/marsyas/libmarsyas.a \
		    $(Libs)

subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/marsyas/config.h
CONFIG_CLEAN_FILES =
bin_PROGRAMS = sfinfo$(EXEEXT) sfplugin$(EXEEXT) sfplay$(EXEEXT) \
	extract$(EXEEXT) bextract$(EXEEXT) mkcollection$(EXEEXT) \
	phasevocoder$(EXEEXT) pitchextract$(EXEEXT) sfplaygui$(EXEEXT) \
	tempo$(EXEEXT) server$(EXEEXT) textract$(EXEEXT) msl$(EXEEXT) \
	tutorial$(EXEEXT) ERBTest$(EXEEXT) marsyasTests$(EXEEXT) \
	SeneffEarTest$(EXEEXT) record$(EXEEXT) drumExtract$(EXEEXT) \
	mixer$(EXEEXT) mugle$(EXEEXT) classifyFile$(EXEEXT) \
	midiTest$(EXEEXT) LPCExample$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_ERBTest_OBJECTS = ERBTest.$(OBJEXT)
ERBTest_OBJECTS = $(am_ERBTest_OBJECTS)
ERBTest_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
ERBTest_LDFLAGS =
am_LPCExample_OBJECTS = LPCExample.$(OBJEXT)
LPCExample_OBJECTS = $(am_LPCExample_OBJECTS)
LPCExample_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
LPCExample_LDFLAGS =
am_SeneffEarTest_OBJECTS = SeneffEarTest.$(OBJEXT)
SeneffEarTest_OBJECTS = $(am_SeneffEarTest_OBJECTS)
SeneffEarTest_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
SeneffEarTest_LDFLAGS =
am_bextract_OBJECTS = bextract.$(OBJEXT)
bextract_OBJECTS = $(am_bextract_OBJECTS)
bextract_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
bextract_LDFLAGS =
am_classifyFile_OBJECTS = classifyFile.$(OBJEXT)
classifyFile_OBJECTS = $(am_classifyFile_OBJECTS)
classifyFile_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
classifyFile_LDFLAGS =
am_drumExtract_OBJECTS = drumExtract.$(OBJEXT)
drumExtract_OBJECTS = $(am_drumExtract_OBJECTS)
drumExtract_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
drumExtract_LDFLAGS =
am_extract_OBJECTS = extract.$(OBJEXT)
extract_OBJECTS = $(am_extract_OBJECTS)
extract_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
extract_LDFLAGS =
am_marsyasTests_OBJECTS = marsyasTests.$(OBJEXT)
marsyasTests_OBJECTS = $(am_marsyasTests_OBJECTS)
marsyasTests_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
marsyasTests_LDFLAGS =
am_midiTest_OBJECTS = midiTest.$(OBJEXT)
midiTest_OBJECTS = $(am_midiTest_OBJECTS)
midiTest_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
midiTest_LDFLAGS =
am_mixer_OBJECTS = mixer.$(OBJEXT)
mixer_OBJECTS = $(am_mixer_OBJECTS)
mixer_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
mixer_LDFLAGS =
am_mkcollection_OBJECTS = mkcollection.$(OBJEXT)
mkcollection_OBJECTS = $(am_mkcollection_OBJECTS)
mkcollection_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
mkcollection_LDFLAGS =
am_msl_OBJECTS = msl.$(OBJEXT)
msl_OBJECTS = $(am_msl_OBJECTS)
msl_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
msl_LDFLAGS =
am_mugle_OBJECTS = mugle.$(OBJEXT)
mugle_OBJECTS = $(am_mugle_OBJECTS)
mugle_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
mugle_LDFLAGS =
am_phasevocoder_OBJECTS = phasevocoder.$(OBJEXT)
phasevocoder_OBJECTS = $(am_phasevocoder_OBJECTS)
phasevocoder_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
phasevocoder_LDFLAGS =
am_pitchextract_OBJECTS = pitchextract.$(OBJEXT)
pitchextract_OBJECTS = $(am_pitchextract_OBJECTS)
pitchextract_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
pitchextract_LDFLAGS =
am_record_OBJECTS = record.$(OBJEXT)
record_OBJECTS = $(am_record_OBJECTS)
record_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
record_LDFLAGS =
am_server_OBJECTS = server_main.$(OBJEXT)
server_OBJECTS = $(am_server_OBJECTS)
server_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
server_LDFLAGS =
am_sfinfo_OBJECTS = sfinfo.$(OBJEXT)
sfinfo_OBJECTS = $(am_sfinfo_OBJECTS)
sfinfo_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
sfinfo_LDFLAGS =
am_sfplay_OBJECTS = sfplay.$(OBJEXT)
sfplay_OBJECTS = $(am_sfplay_OBJECTS)
sfplay_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
sfplay_LDFLAGS =
am_sfplaygui_OBJECTS = sfplaygui.$(OBJEXT)
sfplaygui_OBJECTS = $(am_sfplaygui_OBJECTS)
sfplaygui_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
sfplaygui_LDFLAGS =
am_sfplugin_OBJECTS = sfplugin.$(OBJEXT)
sfplugin_OBJECTS = $(am_sfplugin_OBJECTS)
sfplugin_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
sfplugin_LDFLAGS =
am_tempo_OBJECTS = tempo.$(OBJEXT)
tempo_OBJECTS = $(am_tempo_OBJECTS)
tempo_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
tempo_LDFLAGS =
am_textract_OBJECTS = textract.$(OBJEXT)
textract_OBJECTS = $(am_textract_OBJECTS)
textract_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
textract_LDFLAGS =
am_tutorial_OBJECTS = tutorial.$(OBJEXT)
tutorial_OBJECTS = $(am_tutorial_OBJECTS)
tutorial_DEPENDENCIES = $(top_builddir)/marsyas/libmarsyas.a
tutorial_LDFLAGS =

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)/marsyas
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/ERBTest.Po ./$(DEPDIR)/LPCExample.Po \
	./$(DEPDIR)/SeneffEarTest.Po \
	./$(DEPDIR)/bextract.Po ./$(DEPDIR)/classifyFile.Po \
	./$(DEPDIR)/drumExtract.Po ./$(DEPDIR)/extract.Po \
	./$(DEPDIR)/marsyasTests.Po ./$(DEPDIR)/midiTest.Po \
	./$(DEPDIR)/mixer.Po ./$(DEPDIR)/mkcollection.Po \
	./$(DEPDIR)/msl.Po ./$(DEPDIR)/mugle.Po \
	./$(DEPDIR)/phasevocoder.Po \
	./$(DEPDIR)/pitchextract.Po ./$(DEPDIR)/record.Po \
	./$(DEPDIR)/server_main.Po ./$(DEPDIR)/sfinfo.Po \
	./$(DEPDIR)/sfplay.Po ./$(DEPDIR)/sfplaygui.Po \
	./$(DEPDIR)/sfplugin.Po ./$(DEPDIR)/tempo.Po \
	./$(DEPDIR)/textract.Po ./$(DEPDIR)/tutorial.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
DIST_SOURCES = $(ERBTest_SOURCES) $(LPCExample_SOURCES) \
	$(SeneffEarTest_SOURCES) $(bextract_SOURCES) \
	$(classifyFile_SOURCES) $(drumExtract_SOURCES) \
	$(extract_SOURCES) $(marsyasTests_SOURCES) $(midiTest_SOURCES) \
	$(mixer_SOURCES) $(mkcollection_SOURCES) $(msl_SOURCES) \
	$(mugle_SOURCES) $(phasevocoder_SOURCES) \
	$(pitchextract_SOURCES) $(record_SOURCES) $(server_SOURCES) \
	$(sfinfo_SOURCES) $(sfplay_SOURCES) $(sfplaygui_SOURCES) \
	$(sfplugin_SOURCES) $(tempo_SOURCES) $(textract_SOURCES) \
	$(tutorial_SOURCES)

RECURSIVE_TARGETS = info-recursive dvi-recursive pdf-recursive \
	ps-recursive install-info-recursive uninstall-info-recursive \
	all-recursive install-data-recursive install-exec-recursive \
	installdirs-recursive install-recursive uninstall-recursive \
	check-recursive installcheck-recursive
DIST_COMMON = $(srcdir)/Makefile.in ChangeLog Makefile.am
DIST_SUBDIRS = $(SUBDIRS)
SOURCES = $(ERBTest_SOURCES) $(LPCExample_SOURCES) $(SeneffEarTest_SOURCES) $(bextract_SOURCES) $(classifyFile_SOURCES) $(drumExtract_SOURCES) $(extract_SOURCES) $(marsyasTests_SOURCES) $(midiTest_SOURCES) $(mixer_SOURCES) $(mkcollection_SOURCES) $(msl_SOURCES) $(mugle_SOURCES) $(phasevocoder_SOURCES) $(pitchextract_SOURCES) $(record_SOURCES) $(server_SOURCES) $(sfinfo_SOURCES) $(sfplay_SOURCES) $(sfplaygui_SOURCES) $(sfplugin_SOURCES) $(tempo_SOURCES) $(textract_SOURCES) $(tutorial_SOURCES)

all: all-recursive

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
ERBTest$(EXEEXT): $(ERBTest_OBJECTS) $(ERBTest_DEPENDENCIES) 
	@rm -f ERBTest$(EXEEXT)
	$(CXXLINK) $(ERBTest_LDFLAGS) $(ERBTest_OBJECTS) $(ERBTest_LDADD) $(LIBS)
LPCExample$(EXEEXT): $(LPCExample_OBJECTS) $(LPCExample_DEPENDENCIES) 
	@rm -f LPCExample$(EXEEXT)
	$(CXXLINK) $(LPCExample_LDFLAGS) $(LPCExample_OBJECTS) $(LPCExample_LDADD) $(LIBS)
SeneffEarTest$(EXEEXT): $(SeneffEarTest_OBJECTS) $(SeneffEarTest_DEPENDENCIES) 
	@rm -f SeneffEarTest$(EXEEXT)
	$(CXXLINK) $(SeneffEarTest_LDFLAGS) $(SeneffEarTest_OBJECTS) $(SeneffEarTest_LDADD) $(LIBS)
bextract$(EXEEXT): $(bextract_OBJECTS) $(bextract_DEPENDENCIES) 
	@rm -f bextract$(EXEEXT)
	$(CXXLINK) $(bextract_LDFLAGS) $(bextract_OBJECTS) $(bextract_LDADD) $(LIBS)
classifyFile$(EXEEXT): $(classifyFile_OBJECTS) $(classifyFile_DEPENDENCIES) 
	@rm -f classifyFile$(EXEEXT)
	$(CXXLINK) $(classifyFile_LDFLAGS) $(classifyFile_OBJECTS) $(classifyFile_LDADD) $(LIBS)
drumExtract$(EXEEXT): $(drumExtract_OBJECTS) $(drumExtract_DEPENDENCIES) 
	@rm -f drumExtract$(EXEEXT)
	$(CXXLINK) $(drumExtract_LDFLAGS) $(drumExtract_OBJECTS) $(drumExtract_LDADD) $(LIBS)
extract$(EXEEXT): $(extract_OBJECTS) $(extract_DEPENDENCIES) 
	@rm -f extract$(EXEEXT)
	$(CXXLINK) $(extract_LDFLAGS) $(extract_OBJECTS) $(extract_LDADD) $(LIBS)
marsyasTests$(EXEEXT): $(marsyasTests_OBJECTS) $(marsyasTests_DEPENDENCIES) 
	@rm -f marsyasTests$(EXEEXT)
	$(CXXLINK) $(marsyasTests_LDFLAGS) $(marsyasTests_OBJECTS) $(marsyasTests_LDADD) $(LIBS)
midiTest$(EXEEXT): $(midiTest_OBJECTS) $(midiTest_DEPENDENCIES) 
	@rm -f midiTest$(EXEEXT)
	$(CXXLINK) $(midiTest_LDFLAGS) $(midiTest_OBJECTS) $(midiTest_LDADD) $(LIBS)
mixer$(EXEEXT): $(mixer_OBJECTS) $(mixer_DEPENDENCIES) 
	@rm -f mixer$(EXEEXT)
	$(CXXLINK) $(mixer_LDFLAGS) $(mixer_OBJECTS) $(mixer_LDADD) $(LIBS)
mkcollection$(EXEEXT): $(mkcollection_OBJECTS) $(mkcollection_DEPENDENCIES) 
	@rm -f mkcollection$(EXEEXT)
	$(CXXLINK) $(mkcollection_LDFLAGS) $(mkcollection_OBJECTS) $(mkcollection_LDADD) $(LIBS)
msl$(EXEEXT): $(msl_OBJECTS) $(msl_DEPENDENCIES) 
	@rm -f msl$(EXEEXT)
	$(CXXLINK) $(msl_LDFLAGS) $(msl_OBJECTS) $(msl_LDADD) $(LIBS)
mugle$(EXEEXT): $(mugle_OBJECTS) $(mugle_DEPENDENCIES) 
	@rm -f mugle$(EXEEXT)
	$(CXXLINK) $(mugle_LDFLAGS) $(mugle_OBJECTS) $(mugle_LDADD) $(LIBS)
phasevocoder$(EXEEXT): $(phasevocoder_OBJECTS) $(phasevocoder_DEPENDENCIES) 
	@rm -f phasevocoder$(EXEEXT)
	$(CXXLINK) $(phasevocoder_LDFLAGS) $(phasevocoder_OBJECTS) $(phasevocoder_LDADD) $(LIBS)
pitchextract$(EXEEXT): $(pitchextract_OBJECTS) $(pitchextract_DEPENDENCIES) 
	@rm -f pitchextract$(EXEEXT)
	$(CXXLINK) $(pitchextract_LDFLAGS) $(pitchextract_OBJECTS) $(pitchextract_LDADD) $(LIBS)
record$(EXEEXT): $(record_OBJECTS) $(record_DEPENDENCIES) 
	@rm -f record$(EXEEXT)
	$(CXXLINK) $(record_LDFLAGS) $(record_OBJECTS) $(record_LDADD) $(LIBS)
server$(EXEEXT): $(server_OBJECTS) $(server_DEPENDENCIES) 
	@rm -f server$(EXEEXT)
	$(CXXLINK) $(server_LDFLAGS) $(server_OBJECTS) $(server_LDADD) $(LIBS)
sfinfo$(EXEEXT): $(sfinfo_OBJECTS) $(sfinfo_DEPENDENCIES) 
	@rm -f sfinfo$(EXEEXT)
	$(CXXLINK) $(sfinfo_LDFLAGS) $(sfinfo_OBJECTS) $(sfinfo_LDADD) $(LIBS)
sfplay$(EXEEXT): $(sfplay_OBJECTS) $(sfplay_DEPENDENCIES) 
	@rm -f sfplay$(EXEEXT)
	$(CXXLINK) $(sfplay_LDFLAGS) $(sfplay_OBJECTS) $(sfplay_LDADD) $(LIBS)
sfplaygui$(EXEEXT): $(sfplaygui_OBJECTS) $(sfplaygui_DEPENDENCIES) 
	@rm -f sfplaygui$(EXEEXT)
	$(CXXLINK) $(sfplaygui_LDFLAGS) $(sfplaygui_OBJECTS) $(sfplaygui_LDADD) $(LIBS)
sfplugin$(EXEEXT): $(sfplugin_OBJECTS) $(sfplugin_DEPENDENCIES) 
	@rm -f sfplugin$(EXEEXT)
	$(CXXLINK) $(sfplugin_LDFLAGS) $(sfplugin_OBJECTS) $(sfplugin_LDADD) $(LIBS)
tempo$(EXEEXT): $(tempo_OBJECTS) $(tempo_DEPENDENCIES) 
	@rm -f tempo$(EXEEXT)
	$(CXXLINK) $(tempo_LDFLAGS) $(tempo_OBJECTS) $(tempo_LDADD) $(LIBS)
textract$(EXEEXT): $(textract_OBJECTS) $(textract_DEPENDENCIES) 
	@rm -f textract$(EXEEXT)
	$(CXXLINK) $(textract_LDFLAGS) $(textract_OBJECTS) $(textract_LDADD) $(LIBS)
tutorial$(EXEEXT): $(tutorial_OBJECTS) $(tutorial_DEPENDENCIES) 
	@rm -f tutorial$(EXEEXT)
	$(CXXLINK) $(tutorial_LDFLAGS) $(tutorial_OBJECTS) $(tutorial_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ERBTest.Po
include ./$(DEPDIR)/LPCExample.Po
include ./$(DEPDIR)/SeneffEarTest.Po
include ./$(DEPDIR)/bextract.Po
include ./$(DEPDIR)/classifyFile.Po
include ./$(DEPDIR)/drumExtract.Po
include ./$(DEPDIR)/extract.Po
include ./$(DEPDIR)/marsyasTests.Po
include ./$(DEPDIR)/midiTest.Po
include ./$(DEPDIR)/mixer.Po
include ./$(DEPDIR)/mkcollection.Po
include ./$(DEPDIR)/msl.Po
include ./$(DEPDIR)/mugle.Po
include ./$(DEPDIR)/phasevocoder.Po
include ./$(DEPDIR)/pitchextract.Po
include ./$(DEPDIR)/record.Po
include ./$(DEPDIR)/server_main.Po
include ./$(DEPDIR)/sfinfo.Po
include ./$(DEPDIR)/sfplay.Po
include ./$(DEPDIR)/sfplaygui.Po
include ./$(DEPDIR)/sfplugin.Po
include ./$(DEPDIR)/tempo.Po
include ./$(DEPDIR)/textract.Po
include ./$(DEPDIR)/tutorial.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if (etags --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	else \
	  include_option=--include; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$(top_distdir)" \
	        distdir=../$(distdir)/$$subdir \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS)
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs) $(DESTDIR)$(bindir)

install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

info: info-recursive

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-recursive ctags \
	ctags-recursive distclean distclean-compile distclean-generic \
	distclean-recursive distclean-tags distdir dvi dvi-am \
	dvi-recursive info info-am info-recursive install install-am \
	install-binPROGRAMS install-data install-data-am \
	install-data-recursive install-exec install-exec-am \
	install-exec-recursive install-info install-info-am \
	install-info-recursive install-man install-recursive \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am installdirs-recursive maintainer-clean \
	maintainer-clean-generic maintainer-clean-recursive mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-recursive \
	pdf pdf-am pdf-recursive ps ps-am ps-recursive tags \
	tags-recursive uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-info-am uninstall-info-recursive uninstall-recursive

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
