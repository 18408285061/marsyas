// Generated by Bisonc++ V4.04.01 on Sun, 01 Dec 2013 01:10:15 -0800

// $insert class.ih
#include "parser_impl.h"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {273, 0}, // 1: input ->  <empty>
     {273, 1}, // 2: input ->  actor_instance
     {274, 2}, // 3: actor_instance ->  actor_instance_decl actor_def
     {277, 2}, // 4: actor_prototype ->  actor_prototype_decl actor_def
     {275, 1}, // 5: actor_instance_decl ->  id
     {275, 3}, // 6: actor_instance_decl (':') ->  id ':' id
     {278, 3}, // 7: actor_prototype_decl (':') ->  id ':' id
     {276, 0}, // 8: actor_def ->  <empty>
     {276, 3}, // 9: actor_def ('{') ->  '{' actor_def_list '}'
     {280, 0}, // 10: actor_def_list ->  <empty>
     {280, 2}, // 11: actor_def_list ->  actor_def_list actor_def_element
     {281, 2}, // 12: actor_def_element (ARROW) ->  ARROW actor_instance
     {281, 2}, // 13: actor_def_element ('~') ->  '~' actor_prototype
     {281, 1}, // 14: actor_def_element ->  control
     {281, 2}, // 15: actor_def_element ('+') ->  '+' control
     {281, 1}, // 16: actor_def_element ->  state
     {282, 3}, // 17: control ('=') ->  path '=' control_value
     {285, 1}, // 18: control_value ->  bool
     {285, 1}, // 19: control_value ->  int
     {285, 1}, // 20: control_value ->  real
     {285, 1}, // 21: control_value ->  matrix
     {285, 1}, // 22: control_value ->  string
     {285, 1}, // 23: control_value ->  path
     {285, 3}, // 24: control_value ('(') ->  '(' operation ')'
     {283, 8}, // 25: state (WHEN) ->  WHEN '(' operation ')' '{' state_def '}' else_state
     {293, 0}, // 26: else_state ->  <empty>
     {293, 4}, // 27: else_state (ELSE) ->  ELSE '{' state_def '}'
     {292, 0}, // 28: state_def ->  <empty>
     {292, 2}, // 29: state_def ->  state_def control
     {289, 3}, // 30: matrix ('[') ->  '[' matrix_contents ']'
     {294, 0}, // 31: matrix_contents ->  <empty>
     {294, 1}, // 32: matrix_contents ->  matrix_row
     {294, 3}, // 33: matrix_contents (';') ->  matrix_contents ';' matrix_row
     {295, 1}, // 34: matrix_row ->  matrix_value
     {295, 3}, // 35: matrix_row (',') ->  matrix_row ',' matrix_value
     {296, 1}, // 36: matrix_value ->  real
     {296, 1}, // 37: matrix_value ->  int
     {291, 1}, // 38: operation ->  operation_value
     {291, 3}, // 39: operation (COMPARE) ->  operation compare operation
     {291, 3}, // 40: operation (MATH1) ->  operation math1 operation
     {291, 3}, // 41: operation (MATH2) ->  operation math2 operation
     {291, 3}, // 42: operation ('(') ->  '(' operation ')'
     {298, 1}, // 43: compare (EQ) ->  EQ
     {298, 1}, // 44: compare (NEQ) ->  NEQ
     {298, 1}, // 45: compare (LESS) ->  LESS
     {298, 1}, // 46: compare (MORE) ->  MORE
     {299, 1}, // 47: math1 ('+') ->  '+'
     {299, 1}, // 48: math1 ('-') ->  '-'
     {300, 1}, // 49: math2 ('*') ->  '*'
     {300, 1}, // 50: math2 ('/') ->  '/'
     {297, 1}, // 51: operation_value ->  bool
     {297, 1}, // 52: operation_value ->  int
     {297, 1}, // 53: operation_value ->  real
     {297, 1}, // 54: operation_value ->  matrix
     {297, 1}, // 55: operation_value ->  string
     {297, 1}, // 56: operation_value ->  path
     {286, 1}, // 57: bool (BOOL) ->  BOOL
     {287, 1}, // 58: int (INT) ->  INT
     {288, 1}, // 59: real (REAL) ->  REAL
     {290, 1}, // 60: string (STRING) ->  STRING
     {279, 1}, // 61: id (ID) ->  ID
     {284, 1}, // 62: path ->  id
     {284, 1}, // 63: path (PATH) ->  PATH
     {301, 1}, // 64: input_$ ->  input
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  6} },                       
    { {     273}, {  1} }, // input              
    { {     274}, {  2} }, // actor_instance     
    { {     275}, {  3} }, // actor_instance_decl
    { {     279}, {  4} }, // id                 
    { {     261}, {  5} }, // ID                 
    { {       0}, { -1} },                       
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  3} },             
    { {     276}, {  6} }, // actor_def
    { {     123}, {  7} }, // '{'      
    { {       0}, { -8} },             
};

SR__ s_4[] =
{
    { { REQ_DEF}, {  2} },       
    { {      58}, {  8} }, // ':'
    { {       0}, { -5} },       
};

SR__ s_5[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {   2} },                  
    { {     280}, {   9} }, // actor_def_list
    { {       0}, { -10} },                  
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       279}, { 10} }, // id
    { {       261}, {  5} }, // ID
    { {         0}, {  0} },      
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, { 13} },                     
    { {       125}, { 11} }, // '}'              
    { {       281}, { 12} }, // actor_def_element
    { {       263}, { 13} }, // ARROW            
    { {       126}, { 14} }, // '~'              
    { {       282}, { 15} }, // control          
    { {        43}, { 16} }, // '+'              
    { {       283}, { 17} }, // state            
    { {       284}, { 18} }, // path             
    { {       264}, { 19} }, // WHEN             
    { {       279}, { 20} }, // id               
    { {       262}, { 21} }, // PATH             
    { {       261}, {  5} }, // ID               
    { {         0}, {  0} },                     
};

SR__ s_10[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_11[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  5} },                       
    { {       274}, { 22} }, // actor_instance     
    { {       275}, {  3} }, // actor_instance_decl
    { {       279}, {  4} }, // id                 
    { {       261}, {  5} }, // ID                 
    { {         0}, {  0} },                       
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  5} },                        
    { {       277}, { 23} }, // actor_prototype     
    { {       278}, { 24} }, // actor_prototype_decl
    { {       279}, { 25} }, // id                  
    { {       261}, {  5} }, // ID                  
    { {         0}, {  0} },                        
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  6} },           
    { {       282}, { 26} }, // control
    { {       284}, { 18} }, // path   
    { {       279}, { 20} }, // id     
    { {       262}, { 21} }, // PATH   
    { {       261}, {  5} }, // ID     
    { {         0}, {  0} },           
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 27} }, // '='
    { {         0}, {  0} },       
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 28} }, // '('
    { {         0}, {  0} },       
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_24[] =
{
    { { REQ_DEF}, {  3} },             
    { {     276}, { 29} }, // actor_def
    { {     123}, {  7} }, // '{'      
    { {       0}, { -8} },             
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 30} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, { 17} },                 
    { {       285}, { 31} }, // control_value
    { {       286}, { 32} }, // bool         
    { {       287}, { 33} }, // int          
    { {       288}, { 34} }, // real         
    { {       289}, { 35} }, // matrix       
    { {       290}, { 36} }, // string       
    { {       284}, { 37} }, // path         
    { {        40}, { 38} }, // '('          
    { {       260}, { 39} }, // BOOL         
    { {       257}, { 40} }, // INT          
    { {       258}, { 41} }, // REAL         
    { {        91}, { 42} }, // '['          
    { {       259}, { 43} }, // STRING       
    { {       279}, { 20} }, // id           
    { {       262}, { 21} }, // PATH         
    { {       261}, {  5} }, // ID           
    { {         0}, {  0} },                 
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       291}, { 44} }, // operation      
    { {       297}, { 45} }, // operation_value
    { {        40}, { 46} }, // '('            
    { {       286}, { 47} }, // bool           
    { {       287}, { 48} }, // int            
    { {       288}, { 49} }, // real           
    { {       289}, { 50} }, // matrix         
    { {       290}, { 51} }, // string         
    { {       284}, { 52} }, // path           
    { {       260}, { 39} }, // BOOL           
    { {       257}, { 40} }, // INT            
    { {       258}, { 41} }, // REAL           
    { {        91}, { 42} }, // '['            
    { {       259}, { 43} }, // STRING         
    { {       279}, { 20} }, // id             
    { {       262}, { 21} }, // PATH           
    { {       261}, {  5} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_29[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       279}, { 53} }, // id
    { {       261}, {  5} }, // ID
    { {         0}, {  0} },      
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       291}, { 54} }, // operation      
    { {       297}, { 45} }, // operation_value
    { {        40}, { 46} }, // '('            
    { {       286}, { 47} }, // bool           
    { {       287}, { 48} }, // int            
    { {       288}, { 49} }, // real           
    { {       289}, { 50} }, // matrix         
    { {       290}, { 51} }, // string         
    { {       284}, { 52} }, // path           
    { {       260}, { 39} }, // BOOL           
    { {       257}, { 40} }, // INT            
    { {       258}, { 41} }, // REAL           
    { {        91}, { 42} }, // '['            
    { {       259}, { 43} }, // STRING         
    { {       279}, { 20} }, // id             
    { {       262}, { 21} }, // PATH           
    { {       261}, {  5} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_42[] =
{
    { { REQ_DEF}, {   8} },                   
    { {     294}, {  55} }, // matrix_contents
    { {     295}, {  56} }, // matrix_row     
    { {     296}, {  57} }, // matrix_value   
    { {     288}, {  58} }, // real           
    { {     287}, {  59} }, // int            
    { {     258}, {  41} }, // REAL           
    { {     257}, {  40} }, // INT            
    { {       0}, { -31} },                   
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, { 13} },           
    { {        41}, { 60} }, // ')'    
    { {       298}, { 61} }, // compare
    { {       299}, { 62} }, // math1  
    { {       300}, { 63} }, // math2  
    { {       266}, { 64} }, // EQ     
    { {       267}, { 65} }, // NEQ    
    { {       268}, { 66} }, // LESS   
    { {       269}, { 67} }, // MORE   
    { {        43}, { 68} }, // '+'    
    { {        45}, { 69} }, // '-'    
    { {        42}, { 70} }, // '*'    
    { {        47}, { 71} }, // '/'    
    { {         0}, {  0} },           
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       291}, { 72} }, // operation      
    { {       297}, { 45} }, // operation_value
    { {        40}, { 46} }, // '('            
    { {       286}, { 47} }, // bool           
    { {       287}, { 48} }, // int            
    { {       288}, { 49} }, // real           
    { {       289}, { 50} }, // matrix         
    { {       290}, { 51} }, // string         
    { {       284}, { 52} }, // path           
    { {       260}, { 39} }, // BOOL           
    { {       257}, { 40} }, // INT            
    { {       258}, { 41} }, // REAL           
    { {        91}, { 42} }, // '['            
    { {       259}, { 43} }, // STRING         
    { {       279}, { 20} }, // id             
    { {       262}, { 21} }, // PATH           
    { {       261}, {  5} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 13} },           
    { {        41}, { 73} }, // ')'    
    { {       298}, { 61} }, // compare
    { {       299}, { 62} }, // math1  
    { {       300}, { 63} }, // math2  
    { {       266}, { 64} }, // EQ     
    { {       267}, { 65} }, // NEQ    
    { {       268}, { 66} }, // LESS   
    { {       269}, { 67} }, // MORE   
    { {        43}, { 68} }, // '+'    
    { {        45}, { 69} }, // '-'    
    { {        42}, { 70} }, // '*'    
    { {        47}, { 71} }, // '/'    
    { {         0}, {  0} },           
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        93}, { 74} }, // ']'
    { {        59}, { 75} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_56[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  76} }, // ','
    { {       0}, { -32} },       
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 77} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       291}, { 78} }, // operation      
    { {       297}, { 45} }, // operation_value
    { {        40}, { 46} }, // '('            
    { {       286}, { 47} }, // bool           
    { {       287}, { 48} }, // int            
    { {       288}, { 49} }, // real           
    { {       289}, { 50} }, // matrix         
    { {       290}, { 51} }, // string         
    { {       284}, { 52} }, // path           
    { {       260}, { 39} }, // BOOL           
    { {       257}, { 40} }, // INT            
    { {       258}, { 41} }, // REAL           
    { {        91}, { 42} }, // '['            
    { {       259}, { 43} }, // STRING         
    { {       279}, { 20} }, // id             
    { {       262}, { 21} }, // PATH           
    { {       261}, {  5} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       291}, { 79} }, // operation      
    { {       297}, { 45} }, // operation_value
    { {        40}, { 46} }, // '('            
    { {       286}, { 47} }, // bool           
    { {       287}, { 48} }, // int            
    { {       288}, { 49} }, // real           
    { {       289}, { 50} }, // matrix         
    { {       290}, { 51} }, // string         
    { {       284}, { 52} }, // path           
    { {       260}, { 39} }, // BOOL           
    { {       257}, { 40} }, // INT            
    { {       258}, { 41} }, // REAL           
    { {        91}, { 42} }, // '['            
    { {       259}, { 43} }, // STRING         
    { {       279}, { 20} }, // id             
    { {       262}, { 21} }, // PATH           
    { {       261}, {  5} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       291}, { 80} }, // operation      
    { {       297}, { 45} }, // operation_value
    { {        40}, { 46} }, // '('            
    { {       286}, { 47} }, // bool           
    { {       287}, { 48} }, // int            
    { {       288}, { 49} }, // real           
    { {       289}, { 50} }, // matrix         
    { {       290}, { 51} }, // string         
    { {       284}, { 52} }, // path           
    { {       260}, { 39} }, // BOOL           
    { {       257}, { 40} }, // INT            
    { {       258}, { 41} }, // REAL           
    { {        91}, { 42} }, // '['            
    { {       259}, { 43} }, // STRING         
    { {       279}, { 20} }, // id             
    { {       262}, { 21} }, // PATH           
    { {       261}, {  5} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, { 13} },           
    { {        41}, { 81} }, // ')'    
    { {       298}, { 61} }, // compare
    { {       299}, { 62} }, // math1  
    { {       300}, { 63} }, // math2  
    { {       266}, { 64} }, // EQ     
    { {       267}, { 65} }, // NEQ    
    { {       268}, { 66} }, // LESS   
    { {       269}, { 67} }, // MORE   
    { {        43}, { 68} }, // '+'    
    { {        45}, { 69} }, // '-'    
    { {        42}, { 70} }, // '*'    
    { {        47}, { 71} }, // '/'    
    { {         0}, {  0} },           
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  7} },                
    { {       295}, { 82} }, // matrix_row  
    { {       296}, { 57} }, // matrix_value
    { {       288}, { 58} }, // real        
    { {       287}, { 59} }, // int         
    { {       258}, { 41} }, // REAL        
    { {       257}, { 40} }, // INT         
    { {         0}, {  0} },                
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       296}, { 83} }, // matrix_value
    { {       288}, { 58} }, // real        
    { {       287}, { 59} }, // int         
    { {       258}, { 41} }, // REAL        
    { {       257}, { 40} }, // INT         
    { {         0}, {  0} },                
};

SR__ s_77[] =
{
    { { DEF_RED}, {   2} },             
    { {     292}, {  84} }, // state_def
    { {       0}, { -28} },             
};

SR__ s_78[] =
{
    { { REQ_DEF}, {   4} },           
    { {     298}, {  61} }, // compare
    { {     299}, {  62} }, // math1  
    { {     300}, {  63} }, // math2  
    { {       0}, { -39} },           
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   4} },           
    { {     298}, {  61} }, // compare
    { {     299}, {  62} }, // math1  
    { {     300}, {  63} }, // math2  
    { {       0}, { -40} },           
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   4} },           
    { {     298}, {  61} }, // compare
    { {     299}, {  62} }, // math1  
    { {     300}, {  63} }, // math2  
    { {       0}, { -41} },           
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  76} }, // ','
    { {       0}, { -33} },       
};

SR__ s_83[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  7} },           
    { {       125}, { 85} }, // '}'    
    { {       282}, { 86} }, // control
    { {       284}, { 18} }, // path   
    { {       279}, { 20} }, // id     
    { {       262}, { 21} }, // PATH   
    { {       261}, {  5} }, // ID     
    { {         0}, {  0} },           
};

SR__ s_85[] =
{
    { { REQ_DEF}, {   3} },              
    { {     293}, {  87} }, // else_state
    { {     265}, {  88} }, // ELSE      
    { {       0}, { -26} },              
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_87[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 89} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_89[] =
{
    { { DEF_RED}, {   2} },             
    { {     292}, {  90} }, // state_def
    { {       0}, { -28} },             
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  7} },           
    { {       125}, { 91} }, // '}'    
    { {       282}, { 86} }, // control
    { {       284}, { 18} }, // path   
    { {       279}, { 20} }, // id     
    { {       262}, { 21} }, // PATH   
    { {       261}, {  5} }, // ID     
    { {         0}, {  0} },           
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,
};

} // anonymous namespace ends


// $insert namespace-open
namespace Marsyas
{

// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 20 "parser.y"
        { d_result = d_vsp__[0]; }
        break;

        case 3:
#line 25 "parser.y"
        {
         d_val__ = node();
         d_val__.tag = ACTOR_NODE;
         d_val__.components = { d_vsp__[-1].components[0], d_vsp__[-1].components[1], d_vsp__[0] };
        }
        break;

        case 4:
#line 34 "parser.y"
        {
         d_val__ = node();
         d_val__.tag = PROTOTYPE_NODE;
         d_val__.components = { d_vsp__[-1].components[0], d_vsp__[-1].components[1], d_vsp__[0] };
        }
        break;

        case 5:
#line 43 "parser.y"
        { d_val__ = node(); d_val__.components = {node(), d_vsp__[0]}; }
        break;

        case 6:
#line 46 "parser.y"
        { d_val__ = node(); d_val__.components = {d_vsp__[-2], d_vsp__[0]}; }
        break;

        case 7:
#line 52 "parser.y"
        { d_val__ = node(); d_val__.components = {d_vsp__[-2], d_vsp__[0]}; }
        break;

        case 9:
#line 58 "parser.y"
        { d_val__ = d_vsp__[-1]; }
        break;

        case 11:
#line 65 "parser.y"
        {
         d_vsp__[-1].components.push_back(d_vsp__[0]);
         d_val__ = d_vsp__[-1];
        }
        break;

        case 12:
#line 73 "parser.y"
        { d_val__ = d_vsp__[0]; }
        break;

        case 13:
#line 75 "parser.y"
        { d_val__ = d_vsp__[0]; }
        break;

        case 15:
#line 80 "parser.y"
        {
         d_vsp__[0].components[0].s = std::string("+") + d_vsp__[0].components[0].s;
         d_val__ = d_vsp__[0];
        }
        break;

        case 17:
#line 89 "parser.y"
        {
         d_val__ = node();
         d_val__.tag = CONTROL_NODE;
         d_val__.components = { std::move(d_vsp__[-2]), std::move(d_vsp__[0]) };
        #ifdef MARSYAS_DEBUG_SCRIPT
         std::cout << "control:"
         << " '" << d_val__.components[0].s << "'"
         << " '" << d_val__.components[1].s << "'"
         << std::endl;
        #endif
         }
        break;

        case 24:
#line 106 "parser.y"
        {
         d_val__ = d_vsp__[-1];
        }
        break;

        case 25:
#line 113 "parser.y"
        {
         d_val__ = node();
         d_val__.tag = STATE_NODE;
         d_val__.components.push_back(d_vsp__[-5]);
         d_val__.components.push_back(d_vsp__[-2]);
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 27:
#line 125 "parser.y"
        {
         d_val__ = d_vsp__[-1];
        }
        break;

        case 29:
#line 133 "parser.y"
        {
         d_vsp__[-1].components.push_back(d_vsp__[0]);
         d_val__ = d_vsp__[-1];
        }
        break;

        case 30:
#line 141 "parser.y"
        {
         d_val__ = d_vsp__[-1];
         d_val__.tag = MATRIX_NODE;
        }
        break;

        case 32:
#line 151 "parser.y"
        {
         d_val__ = node();
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 33:
#line 157 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 34:
#line 165 "parser.y"
        {
         d_val__ = node();
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 35:
#line 171 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 39:
#line 184 "parser.y"
        { d_val__.set_operation(d_vsp__[-2], d_vsp__[-1].s, d_vsp__[0]); }
        break;

        case 40:
#line 187 "parser.y"
        { d_val__.set_operation(d_vsp__[-2], d_vsp__[-1].s, d_vsp__[0]); }
        break;

        case 41:
#line 190 "parser.y"
        { d_val__.set_operation(d_vsp__[-2], d_vsp__[-1].s, d_vsp__[0]); }
        break;

        case 42:
#line 192 "parser.y"
        { d_val__ = d_vsp__[-1]; }
        break;

        case 43:
#line 196 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 44:
#line 197 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 45:
#line 198 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 46:
#line 199 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 47:
#line 203 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 48:
#line 204 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 49:
#line 208 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 50:
#line 209 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 57:
#line 215 "parser.y"
        { d_val__ = d_scanner.bool_value(); }
        break;

        case 58:
#line 219 "parser.y"
        { d_val__ = d_scanner.int_value(); }
        break;

        case 59:
#line 223 "parser.y"
        { d_val__ = d_scanner.real_value(); }
        break;

        case 60:
#line 227 "parser.y"
        { d_val__ = d_scanner.string_value(); }
        break;

        case 61:
#line 231 "parser.y"
        { d_val__ = d_scanner.matched(); d_val__.tag = ID_NODE; }
        break;

        case 63:
#line 236 "parser.y"
        { d_val__ = d_scanner.matched(); d_val__.tag = ID_NODE; }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}


// $insert namespace-close
}


