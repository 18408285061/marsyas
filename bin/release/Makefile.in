# Makefile.in generated by automake 1.6.3 from Makefile.am.
# @configure_input@

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

EXEEXT = @EXEEXT@
OBJEXT = @OBJEXT@
PATH_SEPARATOR = @PATH_SEPARATOR@
AMTAR = @AMTAR@
AWK = @AWK@
Audio = @Audio@
BINDINGS = @BINDINGS@
CC = @CC@
CXX = @CXX@
DEPDIR = @DEPDIR@
DISTRIBUTED = @DISTRIBUTED@
ECHO = @ECHO@

INCLUDES = @INCLUDES@ -I$(top_srcdir)/src/marsyas -I$(top_srcdir)/otherlibs/RtAudio -I$(top_srcdir)/otherlibs/RtMidi -I$(top_srcdir)/otherlibs/libsvm -I$(top_srcdir)/src/marsyas/MATLAB
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
Libs = @Libs@
MADLIB = @MADLIB@
MATLABLIBS = @MATLABLIBS@
MOC = @MOC@
MslLibs = @MslLibs@
PACKAGE = @PACKAGE@
QASSISTANTCLIENT_LDADD = @QASSISTANTCLIENT_LDADD@
QEMBED = @QEMBED@
QT_CXXFLAGS = @QT_CXXFLAGS@
QT_GUILINK = @QT_GUILINK@
QT_LDADD = @QT_LDADD@
RANLIB = @RANLIB@
STRIP = @STRIP@
SWIG = @SWIG@
UIC = @UIC@
VERSION = @VERSION@
VORBISLIB = @VORBISLIB@
ac_aux_dir = @ac_aux_dir@
am__include = @am__include@
am__quote = @am__quote@
install_sh = @install_sh@
qmake = @qmake@

MAINTAINERCLEANFILES = Makefile.in

bin_PROGRAMS = sfplay phasevocoder sfplugin bextract mkcollection \
	mudbox record classifyFile peakSynth peakClustering sfinfo \
	extract midiTest boomchick pitchextract orcarecord \
	virtualsensor kea scheduler msl regressionChecks


sfplay_SOURCES = $(top_srcdir)/src/apps/sfplay/sfplay.cpp
sfplay_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


phasevocoder_SOURCES = $(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp
phasevocoder_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


sfplugin_SOURCES = $(top_srcdir)/src/apps/sfplugin/sfplugin.cpp
sfplugin_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


bextract_SOURCES = $(top_srcdir)/src/apps/bextract/bextract.cpp
bextract_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


mkcollection_SOURCES = $(top_srcdir)/src/apps/mkcollection/mkcollection.cpp
mkcollection_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


mudbox_SOURCES = $(top_srcdir)/src/apps/mudbox/mudbox.cpp
mudbox_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


regressionChecks_SOURCES = \
	$(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp \
	$(top_srcdir)/src/apps/regressionChecks/common-reg.cpp \
	$(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp \
	$(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp \
	$(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp 


regressionChecks_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


record_SOURCES = $(top_srcdir)/src/apps/record/record.cpp
record_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


sfinfo_SOURCES = $(top_srcdir)/src/apps/sfinfo/sfinfo.cpp
sfinfo_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


peakSynth_SOURCES = $(top_srcdir)/src/apps/peakSynth/peakSynth.cpp
peakSynth_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


peakClustering_SOURCES = $(top_srcdir)/src/apps/peakClustering/peakClustering.cpp
peakClustering_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


classifyFile_SOURCES = $(top_srcdir)/src/apps/classifyFile/classifyFile.cpp
classifyFile_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


boomchick_SOURCES = $(top_srcdir)/src/apps/boomchick/boomchick.cpp
boomchick_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


pitchextract_SOURCES = $(top_srcdir)/src/apps/pitchextract/pitchextract.cpp
pitchextract_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


extract_SOURCES = $(top_srcdir)/src/apps/extract/extract.cpp
extract_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


midiTest_SOURCES = $(top_srcdir)/src/apps/midiTest/midiTest.cpp
midiTest_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


orcarecord_SOURCES = $(top_srcdir)/src/apps/orcarecord/orcarecord.cpp
orcarecord_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
	       $(Libs)


virtualsensor_SOURCES = $(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp
virtualsensor_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
		    $(Libs)



#helloworld_SOURCES = $(top_srcdir)/examples/helloworld.cpp
#helloworld_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
#		$(Libs)
scheduler_SOURCES = $(top_srcdir)/src/apps/scheduler/scheduler.cpp
scheduler_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
		$(Libs)


msl_SOURCES = $(top_srcdir)/src/apps/msl/msl.cpp
msl_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
		$(Libs) $(MslLibs)


kea_SOURCES = $(top_srcdir)/src/apps/kea/kea.cpp
kea_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
		$(Libs) 

subdir = bin/release
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_CLEAN_FILES =
bin_PROGRAMS = sfplay$(EXEEXT) phasevocoder$(EXEEXT) sfplugin$(EXEEXT) \
	bextract$(EXEEXT) mkcollection$(EXEEXT) mudbox$(EXEEXT) \
	record$(EXEEXT) classifyFile$(EXEEXT) peakSynth$(EXEEXT) \
	peakClustering$(EXEEXT) sfinfo$(EXEEXT) extract$(EXEEXT) \
	midiTest$(EXEEXT) boomchick$(EXEEXT) pitchextract$(EXEEXT) \
	orcarecord$(EXEEXT) virtualsensor$(EXEEXT) kea$(EXEEXT) \
	scheduler$(EXEEXT) msl$(EXEEXT) regressionChecks$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_bextract_OBJECTS = bextract.$(OBJEXT)
bextract_OBJECTS = $(am_bextract_OBJECTS)
bextract_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
bextract_LDFLAGS =
am_boomchick_OBJECTS = boomchick.$(OBJEXT)
boomchick_OBJECTS = $(am_boomchick_OBJECTS)
boomchick_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
boomchick_LDFLAGS =
am_classifyFile_OBJECTS = classifyFile.$(OBJEXT)
classifyFile_OBJECTS = $(am_classifyFile_OBJECTS)
classifyFile_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
classifyFile_LDFLAGS =
am_extract_OBJECTS = extract.$(OBJEXT)
extract_OBJECTS = $(am_extract_OBJECTS)
extract_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
extract_LDFLAGS =
am_kea_OBJECTS = kea.$(OBJEXT)
kea_OBJECTS = $(am_kea_OBJECTS)
kea_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
kea_LDFLAGS =
am_midiTest_OBJECTS = midiTest.$(OBJEXT)
midiTest_OBJECTS = $(am_midiTest_OBJECTS)
midiTest_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
midiTest_LDFLAGS =
am_mkcollection_OBJECTS = mkcollection.$(OBJEXT)
mkcollection_OBJECTS = $(am_mkcollection_OBJECTS)
mkcollection_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
mkcollection_LDFLAGS =
am_msl_OBJECTS = msl.$(OBJEXT)
msl_OBJECTS = $(am_msl_OBJECTS)
msl_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
msl_LDFLAGS =
am_mudbox_OBJECTS = mudbox.$(OBJEXT)
mudbox_OBJECTS = $(am_mudbox_OBJECTS)
mudbox_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
mudbox_LDFLAGS =
am_orcarecord_OBJECTS = orcarecord.$(OBJEXT)
orcarecord_OBJECTS = $(am_orcarecord_OBJECTS)
orcarecord_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
orcarecord_LDFLAGS =
am_peakClustering_OBJECTS = peakClustering.$(OBJEXT)
peakClustering_OBJECTS = $(am_peakClustering_OBJECTS)
peakClustering_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
peakClustering_LDFLAGS =
am_peakSynth_OBJECTS = peakSynth.$(OBJEXT)
peakSynth_OBJECTS = $(am_peakSynth_OBJECTS)
peakSynth_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
peakSynth_LDFLAGS =
am_phasevocoder_OBJECTS = phasevocoder.$(OBJEXT)
phasevocoder_OBJECTS = $(am_phasevocoder_OBJECTS)
phasevocoder_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
phasevocoder_LDFLAGS =
am_pitchextract_OBJECTS = pitchextract.$(OBJEXT)
pitchextract_OBJECTS = $(am_pitchextract_OBJECTS)
pitchextract_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
pitchextract_LDFLAGS =
am_record_OBJECTS = record.$(OBJEXT)
record_OBJECTS = $(am_record_OBJECTS)
record_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
record_LDFLAGS =
am_regressionChecks_OBJECTS = regressionChecks.$(OBJEXT) \
	common-reg.$(OBJEXT) coreChecks.$(OBJEXT) basicChecks.$(OBJEXT) \
	analysisChecks.$(OBJEXT)
regressionChecks_OBJECTS = $(am_regressionChecks_OBJECTS)
regressionChecks_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
regressionChecks_LDFLAGS =
am_scheduler_OBJECTS = scheduler.$(OBJEXT)
scheduler_OBJECTS = $(am_scheduler_OBJECTS)
scheduler_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
scheduler_LDFLAGS =
am_sfinfo_OBJECTS = sfinfo.$(OBJEXT)
sfinfo_OBJECTS = $(am_sfinfo_OBJECTS)
sfinfo_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
sfinfo_LDFLAGS =
am_sfplay_OBJECTS = sfplay.$(OBJEXT)
sfplay_OBJECTS = $(am_sfplay_OBJECTS)
sfplay_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
sfplay_LDFLAGS =
am_sfplugin_OBJECTS = sfplugin.$(OBJEXT)
sfplugin_OBJECTS = $(am_sfplugin_OBJECTS)
sfplugin_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
sfplugin_LDFLAGS =
am_virtualsensor_OBJECTS = virtualsensor.$(OBJEXT)
virtualsensor_OBJECTS = $(am_virtualsensor_OBJECTS)
virtualsensor_DEPENDENCIES = $(top_builddir)/lib/release/libmarsyas.a
virtualsensor_LDFLAGS =

DEFS = @DEFS@
DEFAULT_INCLUDES =  -I. -I$(srcdir)
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
@AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/analysisChecks.Po \
@AMDEP_TRUE@	./$(DEPDIR)/basicChecks.Po ./$(DEPDIR)/bextract.Po \
@AMDEP_TRUE@	./$(DEPDIR)/boomchick.Po \
@AMDEP_TRUE@	./$(DEPDIR)/classifyFile.Po \
@AMDEP_TRUE@	./$(DEPDIR)/common-reg.Po ./$(DEPDIR)/coreChecks.Po \
@AMDEP_TRUE@	./$(DEPDIR)/extract.Po ./$(DEPDIR)/kea.Po \
@AMDEP_TRUE@	./$(DEPDIR)/midiTest.Po ./$(DEPDIR)/mkcollection.Po \
@AMDEP_TRUE@	./$(DEPDIR)/msl.Po ./$(DEPDIR)/mudbox.Po \
@AMDEP_TRUE@	./$(DEPDIR)/orcarecord.Po \
@AMDEP_TRUE@	./$(DEPDIR)/peakClustering.Po \
@AMDEP_TRUE@	./$(DEPDIR)/peakSynth.Po \
@AMDEP_TRUE@	./$(DEPDIR)/phasevocoder.Po \
@AMDEP_TRUE@	./$(DEPDIR)/pitchextract.Po ./$(DEPDIR)/record.Po \
@AMDEP_TRUE@	./$(DEPDIR)/regressionChecks.Po \
@AMDEP_TRUE@	./$(DEPDIR)/scheduler.Po ./$(DEPDIR)/sfinfo.Po \
@AMDEP_TRUE@	./$(DEPDIR)/sfplay.Po ./$(DEPDIR)/sfplugin.Po \
@AMDEP_TRUE@	./$(DEPDIR)/virtualsensor.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
CXXFLAGS = @CXXFLAGS@
DIST_SOURCES = $(bextract_SOURCES) $(boomchick_SOURCES) \
	$(classifyFile_SOURCES) $(extract_SOURCES) $(kea_SOURCES) \
	$(midiTest_SOURCES) $(mkcollection_SOURCES) $(msl_SOURCES) \
	$(mudbox_SOURCES) $(orcarecord_SOURCES) \
	$(peakClustering_SOURCES) $(peakSynth_SOURCES) \
	$(phasevocoder_SOURCES) $(pitchextract_SOURCES) \
	$(record_SOURCES) $(regressionChecks_SOURCES) \
	$(scheduler_SOURCES) $(sfinfo_SOURCES) $(sfplay_SOURCES) \
	$(sfplugin_SOURCES) $(virtualsensor_SOURCES)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(bextract_SOURCES) $(boomchick_SOURCES) $(classifyFile_SOURCES) $(extract_SOURCES) $(kea_SOURCES) $(midiTest_SOURCES) $(mkcollection_SOURCES) $(msl_SOURCES) $(mudbox_SOURCES) $(orcarecord_SOURCES) $(peakClustering_SOURCES) $(peakSynth_SOURCES) $(phasevocoder_SOURCES) $(pitchextract_SOURCES) $(record_SOURCES) $(regressionChecks_SOURCES) $(scheduler_SOURCES) $(sfinfo_SOURCES) $(sfplay_SOURCES) $(sfplugin_SOURCES) $(virtualsensor_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  bin/release/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
bextract.$(OBJEXT): $(top_srcdir)/src/apps/bextract/bextract.cpp
bextract$(EXEEXT): $(bextract_OBJECTS) $(bextract_DEPENDENCIES) 
	@rm -f bextract$(EXEEXT)
	$(CXXLINK) $(bextract_LDFLAGS) $(bextract_OBJECTS) $(bextract_LDADD) $(LIBS)
boomchick.$(OBJEXT): $(top_srcdir)/src/apps/boomchick/boomchick.cpp
boomchick$(EXEEXT): $(boomchick_OBJECTS) $(boomchick_DEPENDENCIES) 
	@rm -f boomchick$(EXEEXT)
	$(CXXLINK) $(boomchick_LDFLAGS) $(boomchick_OBJECTS) $(boomchick_LDADD) $(LIBS)
classifyFile.$(OBJEXT): \
	$(top_srcdir)/src/apps/classifyFile/classifyFile.cpp
classifyFile$(EXEEXT): $(classifyFile_OBJECTS) $(classifyFile_DEPENDENCIES) 
	@rm -f classifyFile$(EXEEXT)
	$(CXXLINK) $(classifyFile_LDFLAGS) $(classifyFile_OBJECTS) $(classifyFile_LDADD) $(LIBS)
extract.$(OBJEXT): $(top_srcdir)/src/apps/extract/extract.cpp
extract$(EXEEXT): $(extract_OBJECTS) $(extract_DEPENDENCIES) 
	@rm -f extract$(EXEEXT)
	$(CXXLINK) $(extract_LDFLAGS) $(extract_OBJECTS) $(extract_LDADD) $(LIBS)
kea.$(OBJEXT): $(top_srcdir)/src/apps/kea/kea.cpp
kea$(EXEEXT): $(kea_OBJECTS) $(kea_DEPENDENCIES) 
	@rm -f kea$(EXEEXT)
	$(CXXLINK) $(kea_LDFLAGS) $(kea_OBJECTS) $(kea_LDADD) $(LIBS)
midiTest.$(OBJEXT): $(top_srcdir)/src/apps/midiTest/midiTest.cpp
midiTest$(EXEEXT): $(midiTest_OBJECTS) $(midiTest_DEPENDENCIES) 
	@rm -f midiTest$(EXEEXT)
	$(CXXLINK) $(midiTest_LDFLAGS) $(midiTest_OBJECTS) $(midiTest_LDADD) $(LIBS)
mkcollection.$(OBJEXT): \
	$(top_srcdir)/src/apps/mkcollection/mkcollection.cpp
mkcollection$(EXEEXT): $(mkcollection_OBJECTS) $(mkcollection_DEPENDENCIES) 
	@rm -f mkcollection$(EXEEXT)
	$(CXXLINK) $(mkcollection_LDFLAGS) $(mkcollection_OBJECTS) $(mkcollection_LDADD) $(LIBS)
msl.$(OBJEXT): $(top_srcdir)/src/apps/msl/msl.cpp
msl$(EXEEXT): $(msl_OBJECTS) $(msl_DEPENDENCIES) 
	@rm -f msl$(EXEEXT)
	$(CXXLINK) $(msl_LDFLAGS) $(msl_OBJECTS) $(msl_LDADD) $(LIBS)
mudbox.$(OBJEXT): $(top_srcdir)/src/apps/mudbox/mudbox.cpp
mudbox$(EXEEXT): $(mudbox_OBJECTS) $(mudbox_DEPENDENCIES) 
	@rm -f mudbox$(EXEEXT)
	$(CXXLINK) $(mudbox_LDFLAGS) $(mudbox_OBJECTS) $(mudbox_LDADD) $(LIBS)
orcarecord.$(OBJEXT): $(top_srcdir)/src/apps/orcarecord/orcarecord.cpp
orcarecord$(EXEEXT): $(orcarecord_OBJECTS) $(orcarecord_DEPENDENCIES) 
	@rm -f orcarecord$(EXEEXT)
	$(CXXLINK) $(orcarecord_LDFLAGS) $(orcarecord_OBJECTS) $(orcarecord_LDADD) $(LIBS)
peakClustering.$(OBJEXT): \
	$(top_srcdir)/src/apps/peakClustering/peakClustering.cpp
peakClustering$(EXEEXT): $(peakClustering_OBJECTS) $(peakClustering_DEPENDENCIES) 
	@rm -f peakClustering$(EXEEXT)
	$(CXXLINK) $(peakClustering_LDFLAGS) $(peakClustering_OBJECTS) $(peakClustering_LDADD) $(LIBS)
peakSynth.$(OBJEXT): $(top_srcdir)/src/apps/peakSynth/peakSynth.cpp
peakSynth$(EXEEXT): $(peakSynth_OBJECTS) $(peakSynth_DEPENDENCIES) 
	@rm -f peakSynth$(EXEEXT)
	$(CXXLINK) $(peakSynth_LDFLAGS) $(peakSynth_OBJECTS) $(peakSynth_LDADD) $(LIBS)
phasevocoder.$(OBJEXT): \
	$(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp
phasevocoder$(EXEEXT): $(phasevocoder_OBJECTS) $(phasevocoder_DEPENDENCIES) 
	@rm -f phasevocoder$(EXEEXT)
	$(CXXLINK) $(phasevocoder_LDFLAGS) $(phasevocoder_OBJECTS) $(phasevocoder_LDADD) $(LIBS)
pitchextract.$(OBJEXT): \
	$(top_srcdir)/src/apps/pitchextract/pitchextract.cpp
pitchextract$(EXEEXT): $(pitchextract_OBJECTS) $(pitchextract_DEPENDENCIES) 
	@rm -f pitchextract$(EXEEXT)
	$(CXXLINK) $(pitchextract_LDFLAGS) $(pitchextract_OBJECTS) $(pitchextract_LDADD) $(LIBS)
record.$(OBJEXT): $(top_srcdir)/src/apps/record/record.cpp
record$(EXEEXT): $(record_OBJECTS) $(record_DEPENDENCIES) 
	@rm -f record$(EXEEXT)
	$(CXXLINK) $(record_LDFLAGS) $(record_OBJECTS) $(record_LDADD) $(LIBS)
regressionChecks.$(OBJEXT): \
	$(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp
common-reg.$(OBJEXT): \
	$(top_srcdir)/src/apps/regressionChecks/common-reg.cpp
coreChecks.$(OBJEXT): \
	$(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp
basicChecks.$(OBJEXT): \
	$(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp
analysisChecks.$(OBJEXT): \
	$(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp
regressionChecks$(EXEEXT): $(regressionChecks_OBJECTS) $(regressionChecks_DEPENDENCIES) 
	@rm -f regressionChecks$(EXEEXT)
	$(CXXLINK) $(regressionChecks_LDFLAGS) $(regressionChecks_OBJECTS) $(regressionChecks_LDADD) $(LIBS)
scheduler.$(OBJEXT): $(top_srcdir)/src/apps/scheduler/scheduler.cpp
scheduler$(EXEEXT): $(scheduler_OBJECTS) $(scheduler_DEPENDENCIES) 
	@rm -f scheduler$(EXEEXT)
	$(CXXLINK) $(scheduler_LDFLAGS) $(scheduler_OBJECTS) $(scheduler_LDADD) $(LIBS)
sfinfo.$(OBJEXT): $(top_srcdir)/src/apps/sfinfo/sfinfo.cpp
sfinfo$(EXEEXT): $(sfinfo_OBJECTS) $(sfinfo_DEPENDENCIES) 
	@rm -f sfinfo$(EXEEXT)
	$(CXXLINK) $(sfinfo_LDFLAGS) $(sfinfo_OBJECTS) $(sfinfo_LDADD) $(LIBS)
sfplay.$(OBJEXT): $(top_srcdir)/src/apps/sfplay/sfplay.cpp
sfplay$(EXEEXT): $(sfplay_OBJECTS) $(sfplay_DEPENDENCIES) 
	@rm -f sfplay$(EXEEXT)
	$(CXXLINK) $(sfplay_LDFLAGS) $(sfplay_OBJECTS) $(sfplay_LDADD) $(LIBS)
sfplugin.$(OBJEXT): $(top_srcdir)/src/apps/sfplugin/sfplugin.cpp
sfplugin$(EXEEXT): $(sfplugin_OBJECTS) $(sfplugin_DEPENDENCIES) 
	@rm -f sfplugin$(EXEEXT)
	$(CXXLINK) $(sfplugin_LDFLAGS) $(sfplugin_OBJECTS) $(sfplugin_LDADD) $(LIBS)
virtualsensor.$(OBJEXT): \
	$(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp
virtualsensor$(EXEEXT): $(virtualsensor_OBJECTS) $(virtualsensor_DEPENDENCIES) 
	@rm -f virtualsensor$(EXEEXT)
	$(CXXLINK) $(virtualsensor_LDFLAGS) $(virtualsensor_OBJECTS) $(virtualsensor_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/analysisChecks.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/basicChecks.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bextract.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/boomchick.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/classifyFile.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/common-reg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coreChecks.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extract.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kea.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/midiTest.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mkcollection.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/msl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mudbox.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/orcarecord.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/peakClustering.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/peakSynth.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/phasevocoder.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pitchextract.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/record.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/regressionChecks.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scheduler.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sfinfo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sfplay.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sfplugin.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/virtualsensor.Po@am__quote@

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`

bextract.o: $(top_srcdir)/src/apps/bextract/bextract.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/bextract/bextract.cpp' object='bextract.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/bextract.Po' tmpdepfile='$(DEPDIR)/bextract.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bextract.o `test -f '$(top_srcdir)/src/apps/bextract/bextract.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/bextract/bextract.cpp

bextract.obj: $(top_srcdir)/src/apps/bextract/bextract.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/bextract/bextract.cpp' object='bextract.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/bextract.Po' tmpdepfile='$(DEPDIR)/bextract.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bextract.obj `cygpath -w $(top_srcdir)/src/apps/bextract/bextract.cpp`

boomchick.o: $(top_srcdir)/src/apps/boomchick/boomchick.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/boomchick/boomchick.cpp' object='boomchick.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/boomchick.Po' tmpdepfile='$(DEPDIR)/boomchick.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o boomchick.o `test -f '$(top_srcdir)/src/apps/boomchick/boomchick.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/boomchick/boomchick.cpp

boomchick.obj: $(top_srcdir)/src/apps/boomchick/boomchick.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/boomchick/boomchick.cpp' object='boomchick.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/boomchick.Po' tmpdepfile='$(DEPDIR)/boomchick.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o boomchick.obj `cygpath -w $(top_srcdir)/src/apps/boomchick/boomchick.cpp`

classifyFile.o: $(top_srcdir)/src/apps/classifyFile/classifyFile.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/classifyFile/classifyFile.cpp' object='classifyFile.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/classifyFile.Po' tmpdepfile='$(DEPDIR)/classifyFile.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o classifyFile.o `test -f '$(top_srcdir)/src/apps/classifyFile/classifyFile.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/classifyFile/classifyFile.cpp

classifyFile.obj: $(top_srcdir)/src/apps/classifyFile/classifyFile.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/classifyFile/classifyFile.cpp' object='classifyFile.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/classifyFile.Po' tmpdepfile='$(DEPDIR)/classifyFile.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o classifyFile.obj `cygpath -w $(top_srcdir)/src/apps/classifyFile/classifyFile.cpp`

extract.o: $(top_srcdir)/src/apps/extract/extract.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/extract/extract.cpp' object='extract.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/extract.Po' tmpdepfile='$(DEPDIR)/extract.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extract.o `test -f '$(top_srcdir)/src/apps/extract/extract.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/extract/extract.cpp

extract.obj: $(top_srcdir)/src/apps/extract/extract.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/extract/extract.cpp' object='extract.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/extract.Po' tmpdepfile='$(DEPDIR)/extract.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o extract.obj `cygpath -w $(top_srcdir)/src/apps/extract/extract.cpp`

kea.o: $(top_srcdir)/src/apps/kea/kea.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/kea/kea.cpp' object='kea.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/kea.Po' tmpdepfile='$(DEPDIR)/kea.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kea.o `test -f '$(top_srcdir)/src/apps/kea/kea.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/kea/kea.cpp

kea.obj: $(top_srcdir)/src/apps/kea/kea.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/kea/kea.cpp' object='kea.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/kea.Po' tmpdepfile='$(DEPDIR)/kea.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o kea.obj `cygpath -w $(top_srcdir)/src/apps/kea/kea.cpp`

midiTest.o: $(top_srcdir)/src/apps/midiTest/midiTest.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/midiTest/midiTest.cpp' object='midiTest.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/midiTest.Po' tmpdepfile='$(DEPDIR)/midiTest.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o midiTest.o `test -f '$(top_srcdir)/src/apps/midiTest/midiTest.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/midiTest/midiTest.cpp

midiTest.obj: $(top_srcdir)/src/apps/midiTest/midiTest.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/midiTest/midiTest.cpp' object='midiTest.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/midiTest.Po' tmpdepfile='$(DEPDIR)/midiTest.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o midiTest.obj `cygpath -w $(top_srcdir)/src/apps/midiTest/midiTest.cpp`

mkcollection.o: $(top_srcdir)/src/apps/mkcollection/mkcollection.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/mkcollection/mkcollection.cpp' object='mkcollection.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/mkcollection.Po' tmpdepfile='$(DEPDIR)/mkcollection.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mkcollection.o `test -f '$(top_srcdir)/src/apps/mkcollection/mkcollection.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/mkcollection/mkcollection.cpp

mkcollection.obj: $(top_srcdir)/src/apps/mkcollection/mkcollection.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/mkcollection/mkcollection.cpp' object='mkcollection.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/mkcollection.Po' tmpdepfile='$(DEPDIR)/mkcollection.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mkcollection.obj `cygpath -w $(top_srcdir)/src/apps/mkcollection/mkcollection.cpp`

msl.o: $(top_srcdir)/src/apps/msl/msl.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/msl/msl.cpp' object='msl.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/msl.Po' tmpdepfile='$(DEPDIR)/msl.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o msl.o `test -f '$(top_srcdir)/src/apps/msl/msl.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/msl/msl.cpp

msl.obj: $(top_srcdir)/src/apps/msl/msl.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/msl/msl.cpp' object='msl.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/msl.Po' tmpdepfile='$(DEPDIR)/msl.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o msl.obj `cygpath -w $(top_srcdir)/src/apps/msl/msl.cpp`

mudbox.o: $(top_srcdir)/src/apps/mudbox/mudbox.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/mudbox/mudbox.cpp' object='mudbox.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/mudbox.Po' tmpdepfile='$(DEPDIR)/mudbox.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mudbox.o `test -f '$(top_srcdir)/src/apps/mudbox/mudbox.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/mudbox/mudbox.cpp

mudbox.obj: $(top_srcdir)/src/apps/mudbox/mudbox.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/mudbox/mudbox.cpp' object='mudbox.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/mudbox.Po' tmpdepfile='$(DEPDIR)/mudbox.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mudbox.obj `cygpath -w $(top_srcdir)/src/apps/mudbox/mudbox.cpp`

orcarecord.o: $(top_srcdir)/src/apps/orcarecord/orcarecord.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/orcarecord/orcarecord.cpp' object='orcarecord.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/orcarecord.Po' tmpdepfile='$(DEPDIR)/orcarecord.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o orcarecord.o `test -f '$(top_srcdir)/src/apps/orcarecord/orcarecord.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/orcarecord/orcarecord.cpp

orcarecord.obj: $(top_srcdir)/src/apps/orcarecord/orcarecord.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/orcarecord/orcarecord.cpp' object='orcarecord.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/orcarecord.Po' tmpdepfile='$(DEPDIR)/orcarecord.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o orcarecord.obj `cygpath -w $(top_srcdir)/src/apps/orcarecord/orcarecord.cpp`

peakClustering.o: $(top_srcdir)/src/apps/peakClustering/peakClustering.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/peakClustering/peakClustering.cpp' object='peakClustering.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/peakClustering.Po' tmpdepfile='$(DEPDIR)/peakClustering.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o peakClustering.o `test -f '$(top_srcdir)/src/apps/peakClustering/peakClustering.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/peakClustering/peakClustering.cpp

peakClustering.obj: $(top_srcdir)/src/apps/peakClustering/peakClustering.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/peakClustering/peakClustering.cpp' object='peakClustering.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/peakClustering.Po' tmpdepfile='$(DEPDIR)/peakClustering.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o peakClustering.obj `cygpath -w $(top_srcdir)/src/apps/peakClustering/peakClustering.cpp`

peakSynth.o: $(top_srcdir)/src/apps/peakSynth/peakSynth.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/peakSynth/peakSynth.cpp' object='peakSynth.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/peakSynth.Po' tmpdepfile='$(DEPDIR)/peakSynth.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o peakSynth.o `test -f '$(top_srcdir)/src/apps/peakSynth/peakSynth.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/peakSynth/peakSynth.cpp

peakSynth.obj: $(top_srcdir)/src/apps/peakSynth/peakSynth.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/peakSynth/peakSynth.cpp' object='peakSynth.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/peakSynth.Po' tmpdepfile='$(DEPDIR)/peakSynth.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o peakSynth.obj `cygpath -w $(top_srcdir)/src/apps/peakSynth/peakSynth.cpp`

phasevocoder.o: $(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp' object='phasevocoder.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/phasevocoder.Po' tmpdepfile='$(DEPDIR)/phasevocoder.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o phasevocoder.o `test -f '$(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp

phasevocoder.obj: $(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp' object='phasevocoder.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/phasevocoder.Po' tmpdepfile='$(DEPDIR)/phasevocoder.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o phasevocoder.obj `cygpath -w $(top_srcdir)/src/apps/phasevocoder/phasevocoder.cpp`

pitchextract.o: $(top_srcdir)/src/apps/pitchextract/pitchextract.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/pitchextract/pitchextract.cpp' object='pitchextract.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/pitchextract.Po' tmpdepfile='$(DEPDIR)/pitchextract.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pitchextract.o `test -f '$(top_srcdir)/src/apps/pitchextract/pitchextract.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/pitchextract/pitchextract.cpp

pitchextract.obj: $(top_srcdir)/src/apps/pitchextract/pitchextract.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/pitchextract/pitchextract.cpp' object='pitchextract.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/pitchextract.Po' tmpdepfile='$(DEPDIR)/pitchextract.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pitchextract.obj `cygpath -w $(top_srcdir)/src/apps/pitchextract/pitchextract.cpp`

record.o: $(top_srcdir)/src/apps/record/record.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/record/record.cpp' object='record.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/record.Po' tmpdepfile='$(DEPDIR)/record.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o record.o `test -f '$(top_srcdir)/src/apps/record/record.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/record/record.cpp

record.obj: $(top_srcdir)/src/apps/record/record.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/record/record.cpp' object='record.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/record.Po' tmpdepfile='$(DEPDIR)/record.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o record.obj `cygpath -w $(top_srcdir)/src/apps/record/record.cpp`

regressionChecks.o: $(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp' object='regressionChecks.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/regressionChecks.Po' tmpdepfile='$(DEPDIR)/regressionChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o regressionChecks.o `test -f '$(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp

regressionChecks.obj: $(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp' object='regressionChecks.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/regressionChecks.Po' tmpdepfile='$(DEPDIR)/regressionChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o regressionChecks.obj `cygpath -w $(top_srcdir)/src/apps/regressionChecks/regressionChecks.cpp`

common-reg.o: $(top_srcdir)/src/apps/regressionChecks/common-reg.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/common-reg.cpp' object='common-reg.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/common-reg.Po' tmpdepfile='$(DEPDIR)/common-reg.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o common-reg.o `test -f '$(top_srcdir)/src/apps/regressionChecks/common-reg.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/regressionChecks/common-reg.cpp

common-reg.obj: $(top_srcdir)/src/apps/regressionChecks/common-reg.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/common-reg.cpp' object='common-reg.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/common-reg.Po' tmpdepfile='$(DEPDIR)/common-reg.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o common-reg.obj `cygpath -w $(top_srcdir)/src/apps/regressionChecks/common-reg.cpp`

coreChecks.o: $(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp' object='coreChecks.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/coreChecks.Po' tmpdepfile='$(DEPDIR)/coreChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o coreChecks.o `test -f '$(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp

coreChecks.obj: $(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp' object='coreChecks.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/coreChecks.Po' tmpdepfile='$(DEPDIR)/coreChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o coreChecks.obj `cygpath -w $(top_srcdir)/src/apps/regressionChecks/coreChecks.cpp`

basicChecks.o: $(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp' object='basicChecks.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/basicChecks.Po' tmpdepfile='$(DEPDIR)/basicChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o basicChecks.o `test -f '$(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp

basicChecks.obj: $(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp' object='basicChecks.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/basicChecks.Po' tmpdepfile='$(DEPDIR)/basicChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o basicChecks.obj `cygpath -w $(top_srcdir)/src/apps/regressionChecks/basicChecks.cpp`

analysisChecks.o: $(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp' object='analysisChecks.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/analysisChecks.Po' tmpdepfile='$(DEPDIR)/analysisChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o analysisChecks.o `test -f '$(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp

analysisChecks.obj: $(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp' object='analysisChecks.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/analysisChecks.Po' tmpdepfile='$(DEPDIR)/analysisChecks.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o analysisChecks.obj `cygpath -w $(top_srcdir)/src/apps/regressionChecks/analysisChecks.cpp`

scheduler.o: $(top_srcdir)/src/apps/scheduler/scheduler.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/scheduler/scheduler.cpp' object='scheduler.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/scheduler.Po' tmpdepfile='$(DEPDIR)/scheduler.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o scheduler.o `test -f '$(top_srcdir)/src/apps/scheduler/scheduler.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/scheduler/scheduler.cpp

scheduler.obj: $(top_srcdir)/src/apps/scheduler/scheduler.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/scheduler/scheduler.cpp' object='scheduler.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/scheduler.Po' tmpdepfile='$(DEPDIR)/scheduler.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o scheduler.obj `cygpath -w $(top_srcdir)/src/apps/scheduler/scheduler.cpp`

sfinfo.o: $(top_srcdir)/src/apps/sfinfo/sfinfo.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/sfinfo/sfinfo.cpp' object='sfinfo.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/sfinfo.Po' tmpdepfile='$(DEPDIR)/sfinfo.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sfinfo.o `test -f '$(top_srcdir)/src/apps/sfinfo/sfinfo.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/sfinfo/sfinfo.cpp

sfinfo.obj: $(top_srcdir)/src/apps/sfinfo/sfinfo.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/sfinfo/sfinfo.cpp' object='sfinfo.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/sfinfo.Po' tmpdepfile='$(DEPDIR)/sfinfo.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sfinfo.obj `cygpath -w $(top_srcdir)/src/apps/sfinfo/sfinfo.cpp`

sfplay.o: $(top_srcdir)/src/apps/sfplay/sfplay.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/sfplay/sfplay.cpp' object='sfplay.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/sfplay.Po' tmpdepfile='$(DEPDIR)/sfplay.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sfplay.o `test -f '$(top_srcdir)/src/apps/sfplay/sfplay.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/sfplay/sfplay.cpp

sfplay.obj: $(top_srcdir)/src/apps/sfplay/sfplay.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/sfplay/sfplay.cpp' object='sfplay.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/sfplay.Po' tmpdepfile='$(DEPDIR)/sfplay.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sfplay.obj `cygpath -w $(top_srcdir)/src/apps/sfplay/sfplay.cpp`

sfplugin.o: $(top_srcdir)/src/apps/sfplugin/sfplugin.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/sfplugin/sfplugin.cpp' object='sfplugin.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/sfplugin.Po' tmpdepfile='$(DEPDIR)/sfplugin.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sfplugin.o `test -f '$(top_srcdir)/src/apps/sfplugin/sfplugin.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/sfplugin/sfplugin.cpp

sfplugin.obj: $(top_srcdir)/src/apps/sfplugin/sfplugin.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/sfplugin/sfplugin.cpp' object='sfplugin.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/sfplugin.Po' tmpdepfile='$(DEPDIR)/sfplugin.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sfplugin.obj `cygpath -w $(top_srcdir)/src/apps/sfplugin/sfplugin.cpp`

virtualsensor.o: $(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp' object='virtualsensor.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/virtualsensor.Po' tmpdepfile='$(DEPDIR)/virtualsensor.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o virtualsensor.o `test -f '$(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp' || echo '$(srcdir)/'`$(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp

virtualsensor.obj: $(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp
@AMDEP_TRUE@	source='$(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp' object='virtualsensor.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/virtualsensor.Po' tmpdepfile='$(DEPDIR)/virtualsensor.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o virtualsensor.obj `cygpath -w $(top_srcdir)/src/apps/virtualsensor/virtualsensor.cpp`
CXXDEPMODE = @CXXDEPMODE@
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic distclean distclean-compile distclean-depend \
	distclean-generic distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-binPROGRAMS install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic tags uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am


#gettingdata_SOURCES = $(top_srcdir)/examples/gettingdata.cpp
#gettingdata_LDADD = $(top_builddir)/lib/release/libmarsyas.a \
#		    $(Libs)
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
