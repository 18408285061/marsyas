@node Source installation
@chapter Source installation

This chapter shows the steps to get a working version of
Marsyas. Compiling and installing a large piece of software 
like Marsyas is not trivial. In the summer 2008 we switched 
our build system from a combination of autotools and qmake 
to using CMake. We believe that this change has greatly simplified 
the building process across all supported platforms and configurations. 
Starting with the Belfast release 0.2.17 CMake is the only 
supported way to build Marsyas. 


@menu
* Get Marsyas sources::
* Step-by-step building instructions::
* Configuring with CMake::
* Marsyas options::
* Post-install setup::          
* Structure of distribution::   
@end menu


@node Get Marsyas sources
@section Get Marsyas sources

@unnumberedsubsec Stable(-ish) Version

@strong{Note:} Marsyas is currently approaching the next stable release
(version 0.5.0) which will bring a lot of changes that also affect the build
process. Instructions in this manual do not apply anymore to the last
stable release! For this reason we suggest to use the latest development state
of Marsyas sources.

To get the latest Marsyas sources visit the
@uref{https://github.com/marsyas/marsyas/,Marsyas GitHub project page}
and use the "Download ZIP" button.

If you still want to use the last stable Marsyas release, you can obtain
it from SourceForge:
@uref{http://sourceforge.net/projects/marsyas/}

@unnumberedsubsec Development Version

If you intend to keep updating your copy of the Marsyas sources along with the
latest development or contribute to development, you will need to use git to
interact with the Marsyas git repository.

The Marsyas git repository is hosted at GitHub:
@uref{https://github.com/marsyas/marsyas/}

@unnumberedsubsubsec Read access

To clone the repository onto your computer, use the following git command:
@example 
git clone https://github.com/marsyas/marsyas.git
@end example

@unnumberedsubsubsec Write access

The above command will only provide read access to the online repository
(for latest updates). If you want to publish your contributions back to the
online repository, you will need write access:
@enumerate
@item
Create a GitHub account, if you don't have one yet.
@item
Ask permission for write access to the repository on marsyas development
mailing list.
@item
Clone the repository using the following command:
@end enumerate

@example
git clone git@@github.com:marsyas/marsyas.git
@end example



@include build.texi



@node Configuring with CMake
@section Configuring with CMake

CMake produces build systems as desired -- Makefiles on Linux /
MacOS X / Cygwin, XCode projects on MacOS X, and MSVC projects on
Windows. It can also create Eclipse and KDevelop projects.

@subsection Windows

@c FIXME: insert screenshot

@enumerate
@item Run the CMake GUI.

@item Select the root directory of Marsyas source.

@item Select a new directory in which to build Marsyas.

@item Press the @emph{Configure} button.  

@item View the selected options, and change any as desired.  If
you change any options, run @emph{Configure...} again.

@item Press the @emph{Ok} button to create the build system.

@end enumerate


@subsection Unix (including MacOS X)

@image{images/ccmake-unix,,10cm}

@enumerate

@item Open the terminal, create a directory for the build, and run
@code{ccmake}:

@example
cd MY-MARSYAS-DIR
mkdir build
cd build
ccmake ..
@end example 

@item Press @code{[c]} to begin the configuration.  Once you have
finished changing options, press @code{[c]} to configure the
project again.  Enabling certain options may add new options to
configure.  Repeat until you are satisfied with the selected
options.

@item To see @emph{advanced} options, press @code{[t]}.

@item After changing the final options, press @code{[g]} to
generate the build system.

@end enumerate


@node Marsyas options
@section Marsyas options

@subsection Input/Output

@table @code

@item MARSYAS_AUDIOIO
This enables audio input/output.  Requires DirectX on Windows and
either JACK, ALSA or OSS on Linux.  MacOS X audio support is built-in
with the basic developer tools.

Note that this option also requires WITH_CPP11 option to be enabled (described
below).

@item MARSYAS_MIDIIO
This enables midi input/output.  Requires DirectX on Windows and
either ALSA or OSS on Linux.  MacOS X audio support is built-in
with the basic developer tools.

@end table

Audio and MIDI IO support also depends on WITH_JACK, WITH_ALSA, and WITH_OSS
options, described below.


@subsection Code messages and optional portions

@table @code

@item MARSYAS_ASSERT
Turns on assertions.

@item MARSYAS_PROFILING
Turns on profiling.

@item MARSYAS_DEBUG
Turns on debugging info (large performance penalty).

@item DISTRIBUTED
(@emph{advanced} option) experimental code for distributed
systems.

@end table


@subsection Logging options

These are @emph{advanced} options.

@table @code

@item MARSYAS_LOG_WARNINGS

@item MARSYAS_LOG_DEBUGS

@item MARSYAS_LOG_DIAGNOSTICS

@item MARSYAS_LOG2FILE

@item MARSYAS_LOG2STDOUT

@item MARSYAS_LOG2GUI

@end table


@subsection Testing options

@table @code
@item MARSYAS_TESTS
Build Marsyas tests, so they can be run using @code{make test}.
@end table


@subsection Optional software (WITH_*)

All of these options require additional software to be
@strong{installed and properly configured}.

@table @code

@item WITH_CPP11
Enables compilation in C++11 mode. If disabled, Marsyas will be compiled with
limited functionality. Specifically, the audio IO and multi-threading support
require this option to be enabled.

This option requires a compiler with adequate C++11 support.
Minimum required compiler versions are ensured by CMake, and reported if not
satisfied.

@item WITH_MAD
mp3 audio decoding with
@uref{http://sourceforge.net/projects/mad/, LibMAD}

@item WITH_VORBIS
ogg vorbis audio decoding with libvorbis - it requires 

@item WITH_MATLAB
Builds the MATLAB engine interface.

@item WITH_SWIG
Builds SWIG bindings.  This option enables the following
sub-options: WITH_SWIG_PYTHON, WITH_SWIG_JAVA, WITH_SWIG_LUA, and
WITH_SWIG_RUBY.

@item WITH_QT
Builds the marsyasqt library and Qt applications.  Requires Qt
4.2.3 or higher.

@item WITH_VAMP
Build plugins for Vamp (see @ref{SonicVisualiser Vamp Plugins} for more information).

@item WITH_GSTREAMER
Use GStreamer as an audio source

@end table

@unnumberedsubsubsec Linux-specific:

@table @code
@item WITH_JACK
Enables audio IO using JACK, if available.
@item WITH_ALSA
Enables audio and MIDI IO using ALSA, if available.
@item WITH_OSS
Enables audio and MIDI IO using OSS, if available.
@end table



@node Post-install setup
@section Post-install setup

@menu
* Vim editor support::          
* Datasets::                    
@end menu

@node Vim editor support
@subsection Vim editor support

A syntax file for vim color highlighting is in @file{misc/marsyas.vim}.
To use this file, copy it to @file{$HOME/.vim/syntax} add the following
lines to @file{$HOME/.vim/filetype.vim}:

@example
if exists("did_load_filetypes")
  finish
endif
augroup filetypedetect
  au! BufNewFile,BufRead *.cpp          setf marsyas
  au! BufNewFile,BufRead *.h            setf marsyas
augroup END
@end example


@node Datasets
@subsection Datasets

Useful datasets:

@itemize
@item
@uref{http://marsyas.info/marsyas-coffee/marsyas-coffee-latest.tar.bz2,
marsyas-coffee}:
data set used for large black-box tests in Marsyas.  (NOW
DEFUNCT, MIGHT POSSIBLY BE USED AGAIN LATER)

@item
@uref{http://marsyas.info/download/data_sets}: large data sets.

@end itemize


@node Structure of distribution
@section Structure of distribution 

Marsyas is primarily targeting researchers and software developers who
want to advance the existing knowledge within Marsyas' area of application
and in turn develop Marsyas further. For that purpose, familiarity with the
structure of the source code and file system is important.

The root directory contains the following files:

@itemize
@item @b{AUTHORS, COPYING, README, TODO:} these files are
self-explanatory.
@end itemize 


@noindent
In addition, there are the following subdirectories:

@itemize
@item @b{src/} All the C++ source files.

@item @b{src/marsyas/} The Marsyas framework and modules (MarSystems). This is
compiled into a library for use in other executable programs.

@item @b{src/marsyas/core} Framework core.
@item @b{src/marsyas/realtime} Facilities for realtime MarSystem execution.
@item @b{src/marsyas/debug} Facilities for dataflow debugging.
@item @b{src/marsyas/marsystems} Concrete MarSystems.
@item @b{src/marsyas/optional} Optionally-compiled MarSystems that depend on
third-party libraries.


@item @b{src/apps/} Various command-line applications.

@item @b{src/Qt4Apps/} GUI applications using Qt 4. Most of those have been
ported to use Qt 5.

@item @b{src/qt5apps/} GUI applications using Qt 5. All future GUI applications
using Qt shall be developed here.

@item @b{src/tests/unit_tests/} Tests for individual framework modules
(MarSystems).

@item @b{src/tests/black-box/} Tests for executable programs.

@item @b{doc/} Source files for documentation (which you are currently reading).

@item @b{scripts/} Convenient scripts to help programming with Marsyas.

@item @b{scripts/MATLAB/} MATLAB scripts.

@end itemize
