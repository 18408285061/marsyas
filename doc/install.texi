@node Source installation
@chapter Source installation

This chapter shows the steps to get a working version of
Marsyas. Compiling and installing a large piece of software 
like Marsyas is not trivial. In the summer 2008 we switched 
our build system from a combination of autotools and qmake 
to using CMake. We believe that this change has greatly simplified 
the building process across all supported platforms and configurations. 
Starting with the Belfast release 0.2.17 CMake is the only 
supported way to build Marsyas. 


@menu
* Prerequisites::               
* Download::                    
* Configuring with CMake::      
* Marsyas options::             
* Compiling::                   
* Specific installation examples::  
* Post-install setup::          
* Structure of distribution::   
@end menu

@node Prerequisites
@section Prerequisites

Some additional software must be installed before compiling
Marsyas.

@menu
* CMake installation::          
* Compiler configuration::      
@end menu


@node CMake installation
@subsection CMake installation

Before compiling Marsyas, you @strong{must} install CMake 2.6 or
higher.  CMake is available in source and binary forms from:

@quotation
@uref{http://www.cmake.org/HTML/Download.html}
@end quotation


@node Compiler configuration
@subsection Compiler configuration


@unnumberedsubsubsec Linux compiler configuration

@itemize

@item Standard development environment (gcc, g++, etc): probably already
installed.

@item @uref{http://www.alsa-project.org/,ALSA} headers.  On most
distributions, this is a package called @code{alsa-devel} or
@code{libalsa-devel}.

@end itemize

If you install additional software via a package manager such as
@code{apt} or @code{rpm}, then the relevant environment variables
will be configured automatically.


@unnumberedsubsubsec MacOS X compiler configuration

@itemize
@item @uref{http://developer.apple.com/tools/xcode/, Xcode}: standard
development platform on OSX.  Please install from your OSX installation
CD/DVD, or download.

@end itemize

If you install additional software via a package manager such as
@uref{http://www.finkproject.org/, fink} or
@uref{http://macports.com, macports}, then the relevant
environment variables will be configured automatically.


@unnumberedsubsubsec Windows compiler configuration

@itemize

@item Download and install either the free Visual Studio Express
or the full commercial Visual Studio.

@item @uref{http://msdn2.microsoft.com/en-us/xna/aa937788.aspx,
Microsoft DirectX SDK}: (optional) required for audio
input/output. 

@end itemize

If you install additional software, you might need to modify
environment variables manually.


@subsubheading Windows command-line compiler configuration

If you would like to use the Command prompt version, check that
the command-line compiling works:

@example
c:\nmake 
@end example

You will see some version number and it should complain that no
MAKEFILE was found and no target specified.

If you want to use DirectX SDK on the command-line verison, you
may need to add an environment variable called @env{DXSDK_DIR}
and modify your the @env{INCLUDES} and @env{LIBRARY}
environment variables to include the corresponding directories 
in the DirectX SDK installation. 



@node Download
@section Download

@unnumberedsubsec Stable(-ish) Version

Marsyas is hosted at SourceForge:

@example
@uref{http://marsyas.sourceforge.net/}

@uref{http://www.sourceforge.net/projects/marsyas}
@end example

Marsyas is open source software and is distributed as a tarball
(something like @file{marsyas-0.2.8.tar.gz}).  Uncompress this
file using whatever uncompression program you prefer (@code{tar},
winzip, etc).

@unnumberedsubsec Development Version

The latest version can be obtained from the subversion repository
stored at the sourceforge website.  If you are planning on working
extensively with Marsyas and writing your own source code it is
highly recommend that you download a subversion working copy.

@example 
svn co https://marsyas.svn.sourceforge.net/svnroot/marsyas/trunk my-marsyas-dir
@end example

You can replace @file{my-marsyas-dir} with any directory you want.

For Windows users, we recommend
@uref{http://toroisesvn.net/downloads, TortoiseSVN}.



@node Configuring with CMake
@section Configuring with CMake

CMake produces build systems as desired -- Makefiles on Linux /
MacOS X / Cygwin, XCode projects on MacOS X, and MSVC projects on
Windows.  It can also create Eclipse and KDevelop3 projects.

@subsection Windows

@c FIXME: insert screenshot

@enumerate
@item Run the CMake GUI.

@item Select the Marsyas @code{src} directory.

@item Select a new directory in which to build Marsyas.

@item Press the @emph{Configure} button.  

@item View the selected options, and change any as desired.  If
you change any options, run @emph{Configure...} again.

@item Press the @emph{Ok} button to create the build system.

@end enumerate


@subsection Unix (including MacOS X)

@image{images/ccmake-unix,,10cm}

@enumerate

@item Open the terminal, create a directory for the build, and run
@code{ccmake}:

@example
cd MY-MARSYAS-DIR
mkdir build
cd build
ccmake ../src/
@end example 

@item Press @code{[c]} to begin the configuration.  Once you have
finished changing options, press @code{[c]} to configure the
project again.  Enabling certain options may add new options to
configure.  Repeat until you are satisfied with the selected
options.

@item To see @emph{advanced} options, press @code{[t]}.

@item After changing the final options, press @code{[g]} to
generate the build system.

@end enumerate


@node Marsyas options
@section Marsyas options

@subsection Input/Output

@table @code

@item MARSYAS_AUDIOIO
This enables audio input/output.  Requires DirectX on Windows and
either ALSA or OSS on Linux.  MacOS X audio support is built-in
with the basic developer tools.

@item MARSYAS_MIDIIO
This enables midi input/output.  Requires DirectX on Windows and
either ALSA or OSS on Linux.  MacOS X audio support is built-in
with the basic developer tools.

@end table


@subsection Code messages and optional portions

@table @code

@item MARSYAS_ASSERT
Turns on assertions.

@item MARSYAS_PROFILING
Turns on profiling.

@item MARSYAS_DEBUG
Turns on debugging info (large performance penalty).

@item DISTRIBUTED
(@emph{advanced} option) experimental code for distributed
systems.

@end table


@subsection Logging options

These are @emph{advanced} options.

@table @code

@item MARSYAS_LOG_WARNINGS

@item MARSYAS_LOG_DEBUGS

@item MARSYAS_LOG_DIAGNOSTICS

@item MARSYAS_LOG2FILE

@item MARSYAS_LOG2STDOUT

@item MARSYAS_LOG2GUI

@end table


@subsection Optional software (WITH_*)

All of these options require additional software to be
@strong{installed and properly configured}.

@table @code

@item WITH_MAD
mp3 audio decoding with
@uref{http://sourceforge.net/projects/mad/, LibMAD}

@item WITH_VORBIS
ogg vorbis audio decoding with libvorbis.

@item WITH_MATLAB
Builds the MATLAB engine interface.

@item WITH_SWIG
Builds SWIG bindings.  This option enables the following
sub-options: WITH_SWIG_PYTHON, WITH_SWIG_JAVA, WITH_SWIG_LUA, and
WITH_SWIG_RUBY.

@item WITH_QT
Builds the marsyasqt library and Qt applications.  Requires Qt
4.2.3 or higher.

@item WITH_VAMP
Build plugins for Vamp.

@item WITH_GSTREAMER
Use GStreamer as an audio source

@end table



@node Compiling
@section Compiling

Once the build system has been created, simply compile Marsyas
using whatever tools was specified as the generator with cmake. 
IN Unix/OS X that is typically make. There are other possibilities 
for example to use XCode in OS X do: 

@example
cmake -G Xcode ../src/
@end example 

On Windows there different options such as generate a project file 
for Visual Studio, compiling from commandline using nmake or using 
the MinGW toolchain. More specific instructions for some 
configurations can be found in @ref{Specific installation examples}. 

On Unix, use @code{make install} to install Marsyas.  There is no
functionality to install Marsyas outside of the source tree on
Windows.

@c FIXME: check about lack of install on Windows.

@subsection Testing

Marsyas contains some unit tests and regression tests.  They do
not test a great deal of Marsyas, but running them is still
recommended.  On Unix, simply run @code{make test}.  On MSVC on
Windows, build the @code{RUN-TESTS} project.


@node Specific installation examples
@section Specific installation examples

This section contains tips on how to properly install and configure
Marsyas and additional supporting software for different operating
systems and compiler configurations. The instructions are more specific
and detailed. There many possible ways to install supporting software
and install and compile Marsyas depending on your setup and it would be
impossible to cover them all. Therefore only a few representative case
studies are provided. Ideally the basic installation instructions have
worked for you.  If not some of these specific examples might help you 
and you can always ask for help in the mailing lists. Please send us
your own examples and case studies to help cover more configurations. 


@menu
* Compiling on Ubuntu::  
* MacOS X additional notes::    
* Compiling with Visual Studio Express 2008 on Windows XP::  
* Compiling with MinGW on Windows XP::
@end menu

@node Compiling on Ubuntu
@subsection Compiling on Ubuntu

These steps were used to install Marsyas from a fresh 
install of Ubuntu @cindex Ubuntu (kubuntu-8.04.1-desktop-i386) 
on August 25, 2008. 



@enumerate
@item Open a terminal and type the following commands: 

@item sudo apt-get install build-essential 

@item sudo apt-get install subversion 

@item sudo apt-get install libasound2-dev

@item Either download the Linux binary distribution of cmake 2.6 or
compile and install the source code from @uref{http://www.cmake.org} 

@item Test that you can run cmake and svn from the command-line 

@item Follow the basic installation instructions @ref{Compiling}. 

@end enumerate


@node MacOS X additional notes
@subsection MacOS X additional software

@subsubheading Qt

On MacOS X and when using Qt-4.3.0 or higher, you must add:

@example
export QMAKESPEC=/usr/local/Qt4.3/mkspecs/macx-g++/
@end example

@noindent
to your @file{~/.profile} or @file{~/.bash_profile} and then close
(and re-open) your terminal window before compiling Marsyas.


@subsubheading Recording audio

When trying to record audio, the sample rate must be specified
explicitly:

@example
pnet->addMarSystem(mng.create("AudioSource", "srcRec"));
pnet->updctrl("mrs_real/israte", 44100.0);
pnet->updctrl("AudioSource/srcRec/mrs_bool/initAudio", true);
@end example


@subsubheading MATLAB

@enumerate
@item
MATLAB and X11 for OS X must be installed

@item
The configure script assumes it is installed in
/Applications/MATLAB74
(this should be an environment variable; this might be fixed soon ).

@item
The marsaysMATLABrelease configuration must be enabled
(uncommented in marsyasConfig.pri, or do something for autotools)

@item
FIXME: THIS IS WRONG!  Compile Marsyas using qmake, make

@item
try out marsyasTests -t MATLABengine. MATLAB
should open and various benchmarks and communication
between Marsyas and MATLAB should happen. If not
email the mailing lists for some help.

@item
There must be a symbolic link to the matlab executable
from /usr/bin/matlab:
ln -s /Applications/MATLAB74/bin/matlab /usr/bin/matlab

@item
You must start X11 windows manually. "open -a X11", or click on the X11
icon in your /Applications/util/ folder.
@end enumerate


@node Compiling with Visual Studio Express 2008 on Windows XP
@subsection Compiling with Visual Studio Express 2008 on Windows XP


These instructions were used to compile Marsyas using the Microsoft
Visual Studio 2008 Express IDE in Windows XP 
@cindex Windows XP 
@cindex Visual Studio 


@enumerate 

@item Download and install Microsoft Visual C++ Studio Express 2008 
from @uref{http://www.microsoft.com/express/vc}. (you might need 
to install Microsoft Silverlight to view the webpage).

@item Download and install Microsoft Direct X SDK 
from @uref{http://msdn.microsoft.com/en-us/directx/aa937788.aspx}. 
These instructions worked with installing Direct X August 2008 
(DXSDK_Aug08.exe). 

@item Download and install the CMake 2.6 binary using the Win32
installer from @uref{http://www.cmake.org}. 

@item Downlaod and install the Tortoise SVN GUI client from 
@uref{http://tortoisesvn.tigris.org/}. 

@item The Tortoise client is integrated with Windows so 
right clik on your desktop and checkout Marsyas as described 
in the basic installation instructions @ref{Compiling}. 

@item Launch cmake and specify the source and build directory you want 
to use for Marsyas for example c:\marsyas\src and c:\marsyas\build. 
Press configure until all the options are grey and then click ok

@item Go to the c:\marsyas\build directory where you will 
find a Visual Studio project file named marsyas that you can 
open with the Visual Studio 9 Express IDE to compile Marsyas. 


@item The binaries are created in build\bin\Release or build\bin\Debug 
depending on which build configuration is used. 
@end enumerate 


The following optional steps can be used to compile graphical 
user interface tools for Marsyas using the Qt toolkit:

@enumerate
@item Down the Qt for Windows open source edition from 
@uref{http://tortoisesvn.tigris.org/}. Make sure you download 
the source code rather the .exe installer which only works 
for the MinGW compiler rather than Visual Studio. 

@item Extract the files to a directory (make sure the directory name 
does not contain spaces as the Qt configuration gets confused if 
that's the ccase). I used c:\qt\4.4.1. 

@item Start the Visual Studio 2008 Command Prompt and 
go to the directory where you installed Qt and then run 
configure.exe. This will take a few minutes. Once configuration 
is complete you can compile Qt using nmake which take a while 
(about 1 hour on my slow virtual machine) 
@example 
cd c:\qt\4.4.1
configure.exe  
nmake 
@end example 

With Qt 4.4.1 there is a glitch so compilation 
will stop with an error about MathExtras.h. You will 
need to comment out the line #include<xmath.h> 
from c:\qt\4.4.0\src\3rdparty\webkit\JavaScriptCore\wtf\MathExtras.h. 
This is a known error and that seems to be the proposed solution. 


@end enumerate 





@uref{http://python.org, Python}: Installed by default on Linux
and MacOS X machines; Windows users may install it from this site.
Marsyas contains some very useful scripts which are written in
Python.


@node Compiling with MinGW on Windows XP
@subsection Compiling with MinGW on Windows XP

@enumerate 

@item Download and install MinGW from
@uref{http://www.mingw.org/old/download.shtml}

@item Download and install Microsoft Direct X SDK 
from @uref{http://msdn.microsoft.com/en-us/directx/aa937788.aspx}. 
These instructions worked with installing Direct X August 2008 
(DXSDK_Aug08.exe). 

@item Download and install the CMake 2.6 binary using the Win32
installer from @uref{http://www.cmake.org}. 

@item Downlaod and install the Tortoise SVN GUI client from 
@uref{http://tortoisesvn.tigris.org/}. 

@item The Tortoise client is integrated with Windows so 
right click on your desktop and checkout Marsyas as described 
in the basic installation instructions @ref{Compiling}. 

@item Launch cmake and choose the install type to be ``MinGW Makefiles''

@item Specify the source and build directory you want 
CMake to use for Marsyas for example c:\marsyas\src and c:\marsyas\build. 

@item Press configure until all the options are grey and then click ok

@item Go to the c:\marsyas\build directory and type ``mingw32-make''

@item The binaries are created in build\bin\release or build\bin\debug. 
@end enumerate 

@uref{http://python.org, Python}: Installed by default on Linux and
MacOS X machines; Windows users may install it from
@uref{http://python.org, this site}.  Marsyas contains some very
useful scripts which are written in Python.



@node Post-install setup
@section Post-install setup

@menu
* Vim editor support::          
* Datasets::                    
@end menu

@node Vim editor support
@subsection Vim editor support

A syntax file for vim color highlighting is in @file{misc/marsyas.vim}.
To use this file, copy it to @file{$HOME/.vim/syntax} add the following
lines to @file{$HOME/.vim/filetype.vim}:

@example
if exists("did_load_filetypes")
  finish
endif
augroup filetypedetect
  au! BufNewFile,BufRead *.cpp          setf marsyas
  au! BufNewFile,BufRead *.h            setf marsyas
augroup END
@end example


@node Datasets
@subsection Datasets

Useful datasets:

@itemize
@item
@uref{http://marsyas.sness.net/marsyas-coffee/marsyas-coffee-latest.tar.bz2,
marsyas-coffee}:
data set used for large regression tests in Marsyas.

@end itemize


@node Structure of distribution
@section Structure of distribution 

Marsyas is primarily targeted to researchers and software
developers who want to build new systems and applications using
existing building blocks.  Therefore familiarity with the
directory structure of the Marsyas distribution is important for
any serious work with the framework. 

The main marsyas directory consists of the following files: 

@itemize
@item @b{AUTHORS, COPYING, README, TODO:} these files are
self-explanatory.  Changes are recorded in @code{svn log} messages
instead of a @file{Changelog} file.

@end itemize 


@noindent
In addition there are the following subdirectories: 

@itemize 
@item @b{src/} all the C++ source files.

@item @b{src/marsyas/} the main directory containing all the
important source code of Marsyas.  The source files in this
subdirectory are compiled into a static library that other
programs can use to access Marsyas functionality. 

@item @b{src/apps/} the source code for executables.

@item @b{src/marsyasqt/} source for the static library MarsyasQt,
which allows the use of Marsyas in Qt applications.

@item @b{src/Qt4Apps/} provides GUI interfaces using Qt4. These
will not work with earlier versions of Qt. You must have Qt4
installed in order to use or compile these applications. A README
file is supplied with each one that has instructions on how to
compile and run it.

@item @b{src/tests/unit_tests/} tests for individual MarSystems.

@item @b{src/tests/regressions/} tests for apps.

@item @b{doc/} contains the source for the user manual (which you
are currently reading) and developer manual.

@item @b{scripts/} useful scripts to help programming with
Marsyas.

@item @b{scripts/MATLAB/} MATLAB scripts.

@end itemize 


