@node Installation
@chapter Installation

@menu
* Download::                    
* System requirements::         
* Optional programs and libraries::  
* Configuring Marsyas::         
* Compiling Marsyas::           
* Platform-specific notes::     
* Structure of distribution::   
* Generating documentation::    
@end menu


@node Download
@section Download

@subsection Stable(-ish) Version

(@i{Important Note: Marsyas does not use CVS any more; any links to
"marsyas CVS" are hopelessly out of date})

Marsyas is hosted at SourceForge:

@quotation
@uref{http://marsyas.sourceforge.net/}

@uref{http://www.sourceforge.net/projects/marsyas}
@end quotation

Marsyas is open source software and is distributed 
as a tarball (something like @file{marsyas-0.2.8.tar.gz}).  Uncompress
this file using whatever uncompression program you prefer (@code{tar -xf},
winzip, etc).

@subsection Development Version

The latest version can be obtained from the subversion repository 
stored at the sourceforge website. Although constantly in flux the 
latest version is typically relatively stable and usable and if it is not 
we are quick in fixing it. In contrast releases happen infrequently. 
If you are planning on working extensively with Marsyas and writing 
your own source code it is highly recommend that you download a 
subversion working copy. If you only require one of the tools provided 
in Marsyas and don't plan to explore the framework then the regular 
releases should suffice. To check out a working copy do:

@example 
svn co https://marsyas.svn.sourceforge.net/svnroot/marsyas/trunk my-marsyas-dir
@end example

You can replace @file{my-marsyas-dir} with any directory you want.  The 
version/release (version 0.2 release 10) is independently assigned 
from subversion revisions and the latest can be found by checking 
the sourceforge website. 


@node System requirements
@section System requirements

@subsection Linux

Required:

@itemize
@item Standard development environment (gcc, g++, etc): probably already installed.

@item @uref{http://www.alsa-project.org/,ALSA} headers.  On most
distributions, this is a package called @code{alsa-devel} or
@code{libalsa-devel}.
@end itemize

Strongly recommended:

@itemize
@item @uref{http://www.trolltech.com/products/qt,Qt/Trolltech}
development platform, version 4.2.3 or above.
@end itemize


@subsection MacOSX

Required:

@itemize
@item @uref{http://developer.apple.com/tools/xcode/, Xcode}: standard development platform on OSX.  Please install from your OSX installation CD/DVD, or download.
@end itemize

Strongly recommended:

@itemize
@item @uref{http://www.trolltech.com/products/qt,Qt/Trolltech}
development platform, version 4.2.3 or above.
@end itemize


@subsection Windows

On Windows, you may use either MinGW, Microsoft Visual Studio, or
Cygwin.

@subsubsection MinGW

MinGW is a collection of compilers, compiler tools, libraries, and
header files, which can compile code on Windows.  This is the main
supported compiler for Qt/OpenSource; it is installed by default as part
of the normal Qt installation on Windows.

Required:

@itemize
@item @uref{http://www.mingw.org/, MinGW} (installed by default by
Qt/OpenSource)
@item @uref{http://www.trolltech.com/products/qt,Qt/Trolltech}
development platform, version 4.2.3 or above.
@item Microsoft DirectX SDK and Platform SDK
@end itemize



@subsubsection Microsoft Visual Studio

Required:

@itemize
@item Microsoft Visual Studio (visual studio express can compile Marsyas
after a bit of fiddling with preferences)
@item @uref{http://www.trolltech.com/products/qt,Qt/Trolltech}
development platform, version 4.2.3 or above.
@item Microsoft DirectX SDK and Platform SDK
@end itemize


@subsubsection Cygwin

Cygwin is a unix environment for Windows.

Required:

@itemize
@item @uref{http://www.cygwin.com/,Cygwin}, with gcc and autotools
installed (these should be installed by default)
@item Microsoft DirectX SDK and Platform SDK
@end itemize

Strongly recommended:

@itemize
@item @uref{http://www.trolltech.com/products/qt,Qt/Trolltech}
development platform, version 4.2.3 or above.
@end itemize



@node Optional programs and libraries
@section Optional programs and libraries

Useful libraries:

@itemize
@item @uref{http://sourceforge.net/projects/mad/, LibMAD}: mp3 support
@end itemize

Useful programs:

@itemize
@uref{http://python.org, Python}: Installed by default on Linux and MacOS X
machines; Windows users may install it from this site.  Marsyas contains
some very useful @ref{Scripts} which are written in Python.

@uref{http://www.mathworks.com/products/matlab/, Matlab}: information
may be easily passed to and from Matlab and Marsyas; this allows easy
prototyping.

@end itemize


@node Configuring Marsyas
@section Configuring Marsyas

@subsection ...with qmake

Marsyas can be built with qmake, which is the Makefile generator in
Qt.  To build Marsyas, go to the base of the source tree and edit
@file{marsyasConfig.pri}.  You will probably want to change the settings
for @emph{release/debug mode}, @emph{WARNINGS/LOGS}, and @emph{MATLAB
engine classes}, and @emph{MP3 MAD}.

Once you have selected the options you want, simply type

@example
qmake
@end example

@strong{Warning:} on MacOS X and when using Qt-4.3.0 or higher, you
must set this environment variable:

@example
export QMAKESPEC=/usr/local/Qt4.3/mkspecs/macx-g++/
@end example

The easiest (and safest) way to set this is to add that line to your
@file{~/.profile} and then close (and re-open) your terminal window.


@subsection ...with autotools

Marsyas may be compiled using the standard GNU configure script:

@example
./configure
@end example

Marsyas can be customized using various configuration options.  The
current list of available options can be viewed by typing:

@example 
./configure --help 
@end example

For example, to compile Marsyas with assertions enabled, mp3
support through libmad, and writing warnings to a file, one would do: 

@example 
./configure --enable-assert --with-mad --enable-log2file
@end example 

@c shouldn't be in this manual; ./configure --help is the most
@c up-to-date source of this info, so people should read that. -gp

@noindent
A frequent variation (if you don't have root priviledges) 
is to install Marsyas in your home directory:

@example
./configure --prefix=$HOME
make 
make install 
@end example

@subsubsection Debugging options

@example
./configure --enable-debug --enable-assert --enable-warnings
--enable-diagnostics --enable-log2file
make clean
make
@end example

The resulting program can be run under @code{gdb} to track down problems.


@node Compiling Marsyas
@section Compiling Marsyas

@subsection ...on *nix (Linux, FreeBSD, MacOSX)

After @ref{Configuring Marsyas}, simply type

@example
make

(optional, as root unless you changed the installation directory)
make install
@end example



@subsection ...on Windows

After @ref{Configuring Marsyas}, simply type

@example
nmake (nmake debug or nmake all for debug or debug and release builds)
@end example

This builds marsyas.lib, all (at least most of them) command line apps
(sfplay, bextract, etc) and MarPlayer and MarPhasevocoder.

To generate a MSVC .vcproj for a project just cd into the app dir (e.g.
apps/Qt4Apps/Meaws) and do:

@example
qmake -t vcapp 
@end example

In case you also want to create a .vcproj for the marsyas lib, cd into
marsyas dir and do:

@example
qmake -t vclib
@end example


@node Platform-specific notes
@section Platform-specific notes

@menu
* Linux::                       
* Mac OSX::                     
* Windows (MinGW)::             
* Windows (Visual Studio)::     
* Windows (cygwin)::            
@end menu

@node Linux
@subsection Linux

@cindex Linux

Marsyas is mainly developed under Linux so installing 
under Linux is quite straightforward.  By default Marsyas assumes
that in Linux systems the ALSA sound system
and corresponding library and headers are installed.  Most new Linux
distribution are using ALSA.

In addition there are several configure options that 
can be used to enable/disable assertions, enable/disable debugging 
and include optional packages such as support for reading mp3s. 
@ref{Configuring Marsyas}.


@node Mac OSX
@subsection Mac OSX

@cindex Mac OSX

Installation under OS X is almost identical to Linux. The developer
tools are not installed by default so you will need to install them. 
You can download XCode from the Apple Developer website. You can 
check whether they are installed or not by checking that you 
can run gcc on a terminal.

In addition there are several configure options that 
can be used to enable/disable assertions, enable/disable debugging 
and include optional packages such as support for reading mp3s. 
@ref{Configuring Marsyas}.

When trying to record audio, the sample rate must be specified
explicitly:

@example
pnet->addMarSystem(mng.create("AudioSource", "srcRec"));
pnet->updctrl("mrs_real/israte", 44100.0);
pnet->updctrl("AudioSource/srcRec/mrs_bool/initAudio", true);
@end example


@node Windows (MinGW)
@subsection Windows (MinGW)
@cindex Windows, MinGW

No specific notes.


@node Windows (Visual Studio)
@subsection Windows (Visual Studio)
@cindex Windows, Visual Studio

A few of our developers use Visual Studio, so this environment is fairly
well supported.

@example
Anyone wanting to use MSVC2005 (and probably MSVC6, MSVC2003 and
MSVC2005express) and Qt4.x opensource please try doing the following:

1)  Use the most recent version of qmake, available at:

@url{http://qtnode.net/wiki/Qt4_with_Visual_Studio}

2)  Do not forget to put you Qt bin dir in the system path (i.e.
c:\Qt\4.2.2\bin), so you can use qmake anywhere, and to define the
QMAKESPEC env var, that for the case of MSVC2005 should be
win32-msvc2005.

3) open a MSVC2005 command prompt (you can find this in
Start->Programs->Microsoft Visual Studio->Visual Studio Tools); this cmd
prompt has all the env variables correctly configured in case you do not
have them configured in your system)

3) run "qconfigure msvc2005" (without the quotes) and follow the
instructions (basically reply yes whenever asked).

4) after the successful build of qmake and the subsequent generation
of the makefiles for the patched Qt code, just do nmake to build the
Qt lib (this will take a while, so go grab a coffee or something! ;-))

5) When done, you should now be able to create MSVC2005 project using
qmake -t vcapp/vclib from all your marsyas .pro!
@end example


@node Windows (cygwin)
@subsection Windows (cygwin)
@cindex Windows, Cygwin
@cindex Cygwin

Installation under Windows using the cygwin environment and gcc is
similar to Linux. The most recent version of Marsyas 0.2 use RtAudio
for audio playback under Cygwin. In order to compile RtAudio you will
need to have the DirectX SDK installed.

In general, cygwin is not supported as well as Linux and OS X. 


@node Structure of distribution
@section Structure of distribution 

Marsyas is primarily targeted to researchers and software 
developers who want to build new systems and applications 
using existing building blocks. Therefore familiarity 
with the directory structure of the Marsyas distribution 
is important for any serious work with the framework. 

The main marsyas directory consists of the following 
important files: 

@c  TODO: clean up these files.  -gp
@itemize
@item @b{INSTALL, COPYING, THANKS, README, AUTHORS, TODO, Changelog:} text
files with important information in theory.  However, these have not
been updated in years.  We use @code{svn log} messages instead of the
Changelog.
@item @b{configure.in, Makefile.am:} the main files edited by 
the user/programmer that are required for the autotools. You will 
only need to edit these if you are adding new subdirectories 
or configuration options to the distribution. 
@item @b{marsyasConfig.pri:} edit this file to select your configure
options when using qmake.
@item @b{marsyasAll.pro:} only developers should edit this file.
@end itemize 


@noindent
In addition there are the following subdirectories: 

@itemize 
@item @b{marsyas:} the main directory containing all the 
important source code of Marsyas. The source files in this 
subdirectory are compiled into a static library that other 
programs can use to access Marsyas functionality. 

@item @b{bin:} executable files are compiled in @file{bin/release} or
@file{bin/debug}.

@item @b{doc:} contains the user manual (which you are 
currently reading).  To regenerate the manual, see @ref{Generating
documentation}

@item @b{apps:} the source code for the above executables.

@item @b{apps/Qt4Apps:} provides GUI interfaces using Qt4. These will not
work with earlier versions of Qt. You must have Qt4 installed in order
to use or compile these applications. A README file is supplied with
each one that has instructions on how to compile and run it.

@item @b{config:} configuration files used by autotools.

@item @b{scripts:} useful scripts to help programming with Marsyas.

@item @b{scripts/MATLAB:} MATLAB scripts.

@end itemize 


@node Generating documentation
@section Generating documentation

This manual is built with texinfo, and the source code documentation is
created with doxygen.  These software packages may be installed from

@itemize
@item @uref{http://www.gnu.org/software/texinfo/}
@item @uref{http://www.doxygen.org/}
@end itemize

The latest version of the manual is in the SVN tree (see
@ref{Download}), and can be built by running these commands from the
@file{doc/} directory:

@example
make html
make pdf
make doxy
@end example

Source-highlighted examples are stored in the @file{doc/source-doc/}
directory.  These may be built with this additional program and the
following command:

@itemize
@item @uref{http://www.gnu.org/software/src-highlite/}
@end itemize

@example
make sources
@end example

