@node Installation
@chapter Installation

@menu
* Download::                    
* System requirements::         
* Configuring Marsyas::         
* Compiling Marsyas::           
* Platform-specific notes::     
* Structure of distribution::   
@end menu


@node Download
@section Download

@subsection Stable(-ish) Version

(@i{Important Note: Marsyas does not use CVS and therefore the CVS repository 
is out of date})

Marsyas is hosted at SourceForge:

@ifnothtml
http://marsyas.sourceforge.net/
@end ifnothtml

@ifnothtml
http://www.sourceforge.net/projects/marsyas   
@end ifnothtml

@html 
<a href="http://www.sourceforge.net/projects/marsyas">
http://www.sourceforget.net/projects/marsyas </a> 
@end html

@html 
<a href="http://marsyas.sourceforge.net">
http://marsyas.sourceforge.net </a> 
@end html

Marsyas is open source software and is distributed 
as a tarball (something like @file{marsyas-0.2.8.tar.gz}).  Uncompress
this file using whatever uncompression program you prefer (@code{tar -xf},
winzip, etc).

@ignore
To extract the source tarball type: 

@e xample 
tar -zxvf marsyas-0.2.8.tar.gz 
@e nd example

This will create a subdirectory of the current 
directory called marsyas-0.2.8 that contains 
all the source files needed for compiling Marsyas. 
@end ignore

@subsection Development Version

For the brave, the latest (possibly unstable!) version can be
obtained from the subversion repository stored at the sourceforge
website.  To check out a working copy do:

@example 
svn co https://marsyas.svn.sourceforge.net/svnroot/marsyas/trunk my-marsyas-dir
@end example

You can replace @file{my-marsyas-dir} with any directory you want.  The 
version/release (version 0.2 release 10) is independently assigned 
from subversion revisions and the latest can be found by checking 
the sourceforge website. 

@c  this info isn't necessary
@ignore
Installation is the biggest source of grief for first time users of
Marsyas and the main source of email questions. Significant
improvements in the installation process have been made 
with the latest releases. (after marsyas-0.2.2). The following
operating systems are supported in roughly the following order (from
more complete support to less): Linux, MacOS X, Windows (cygwin),
Windows (Visual Studio). If you want to use the full functionality 
of Marsyas and have frequent updates and support you are strongly 
encouraged to use Linux. 
@end ignore

@c  This is good info, but not at this place in the docs.
@ignore
There is a lot of work behind the development of Marsyas. Although
Marsyas is and will remain free software, any form of financial or
hardware support is more than welcome.  The sourceforge page contains
a link for people to donate money to the project and any contribution
is welcome and will help further improve the framework. 
@end ignore


@node System requirements
@section System requirements

@strong{Warning!} Marsyas does not work with qmake in Qt-4.3.  Please
downgrade to Qt-4.2.2 or use the autotools method of compiling Marsyas.

@subsection Linux

Required:

@itemize
@item Standard development environment (gcc, g++, etc): probably already installed.
@item @uref{http://www.trolltech.com/products/qt,QT/Trolltech} development platform.
@end itemize

Optional:

@itemize
@item @uref{http://sourceforge.net/projects/mad/, LibMAD}: mp3 support
@end itemize


@subsection MacOSX

Required:

@itemize
@item @uref{http://developer.apple.com/tools/xcode/, Xcode}: standard development platform on OSX.  Please install from your OSX installation CD/DVD, or download.
@item @uref{http://www.trolltech.com/products/qt, QT/Trolltech} development platform.
@end itemize

Optional:

@itemize
@item @uref{http://sourceforge.net/projects/mad/, LibMAD}: mp3 support
@end itemize


@subsection Windows

Required:

@itemize
@item Microsoft Visual Studio
@item @uref{http://www.trolltech.com/products/qt,QT/Trolltech} development platform
@end itemize

Optional:

@itemize
@item @uref{http://sourceforge.net/projects/mad/, LibMAD}: mp3 support
@end itemize


@node Configuring Marsyas
@section Configuring Marsyas

@subsection ...with qmake

Marsyas can be built with qmake, which is the Makefile generator in
Qt.  To build Marsyas, go to the base of the source tree and edit
@file{marsyasConfig.pri}.  Once you have selected the options you
want (i.e. audio API, Ogg Vorbis support, Matlab support, etc), simply type

@example
qmake
@end example

@b{Requirement: Qt-4.2.3.}  Marsyas does not work with qmake in Qt-4.3.
Please downgrade to Qt-4.2.2 or use the autotools method of compiling
Marsyas.


@subsection ...with autotools

Marsyas may be compiled using the standard GNU configure script:

@example
./configure
@end example

Marsyas can be customized using various configuration 
options. For example to compile Marsyas with assertions 
enabled and with mp3 support through libmad one would do: 

@example 
./configure --enable-assert --enable-mad
@end example 

@noindent
The list of available options can be viewed by: 

@example 
./configure --help 
@end example


@noindent
The following options are supported: 

@itemize
@item @b{--enable-assert}       turns assertions on (small performance penatly) 
@item @b{--enable-debug}        compiles Marsyas in debug mode generating
the necessary files for gdb (large performance penalty) 
@item @b{--enable-mad}          enables support for reading mp3 files using
libmad (which must be installed) 
@item @b{--enable-distributed}  compiles code for distributed audio
feature extraction (experimental) 
@item @b{--enable-readline}     realine support for the Marsyas Scripting
Language (msl) 
@item @b{--enable-oss}          use the OSS sound system 
@end itemize


@noindent
A frequent variation (if you don't have root priviledges) 
is to install Marsyas in your home directory (replace /home/gtzan with 
the appropriate path for your home directory). 
This can be accomplished by doing: 

@example
./configure --prefix=/home/gtzan 
make 
make install 
@end example

@subsubsection Debugging options

@example
./configure --enable-debug --enable-assert --enable-warnings --enable-diagnostics
make clean
make
@end example

The resulting program can be run under @code{gdb} to track down problems.


@node Compiling Marsyas
@section Compiling Marsyas

@subsection ...on *nix (Linux, FreeBSD, MacOSX)

After @ref{Configuring Marsyas}, simply type

@example
make

(optional, as root unless you changed the installation directory)
make install
@end example



@subsection ...on Windows

After @ref{Configuring Marsyas}, simply type

@example
nmake (nmake debug or nmake all for debug or debug and release builds)
@end example

This builds marsyas.lib, all (at least most of them) command line apps
(sfplay, bextract, etc) and MarPlayer and MarPhasevocoder.

To generate a MSVC .vcproj for a project just cd into the app dir (e.g.
apps/Qt4Apps/Meaws) and do:

@example
qmake -t vcapp 
@end example

In case you also want to create a .vcproj for the marsyas lib, cd into
marsyas dir and do:

@example
qmake -t vclib
@end example



@node Platform-specific notes
@section Platform-specific notes

@menu
* Linux::                       
* Mac OSX::                     
* Windows (cygwin)::            
* Windows (Visual Studio)::     
@end menu

@node Linux
@subsection Linux

@cindex Linux

Marsyas is mainly developed under Linux so installing 
under Linux is quite straightforward.  By default Marsyas assumes
that in Linux systems the ALSA sound system
and corresponding library and headers are installed.  Most new Linux
distribution are using ALSA.

In addition there are several configure options that 
can be used to enable/disable assertions, enable/disable debugging 
and include optional packages such as support for reading mp3s. 
@ref{Configuring Marsyas}.

@b{Requirement:} ALSA headers.  On most distributions, this is a
package called @code{alsa-devel} or @code{libalsa-devel}.


@node Mac OSX
@subsection Mac OSX

@cindex Mac OSX

Installation under OS X is almost identical to Linux. The developer
tools are not installed by default so you will need to install them. 
You can download XCode from the Apple Developer website. You can 
check whether they are installed or not by checking that you 
can run gcc on a terminal.

In addition there are several configure options that 
can be used to enable/disable assertions, enable/disable debugging 
and include optional packages such as support for reading mp3s. 
@ref{Configuring Marsyas}.

When trying to record audio, the sample rate must be specified
explicitly:

@example
  recNet->updctrl("AudioSource/srcRec/mrs_real/israte", 44100.0);
  recNet->updctrl("AudioSource/srcRec/mrs_bool/initAudio", true);
@end example


@node Windows (cygwin)
@subsection Windows (cygwin)
@cindex Cygwin

Installation under Windows using the cygwin environment and gcc is
similar to Linux. The most recent version of Marsyas 0.2 use RtAudio
for audio playback under Cygwin. In order to compile RtAudio you will
need to have the DirectX SDk installed.

In general, cygwin is not supported as well as Linux and OS X. 


@node Windows (Visual Studio)
@subsection Windows (Visual Studio)
@cindex Windows

A few of our developers use Visual Studio, so this environment is fairly
well supported.

@example
Anyone wanting to use MSVC2005 (and probably MSVC6, MSVC2003 and
MSVC2005express) and Qt4.x opensource please try doing the following:

1)  Use the most recent version of qmake, available at:

@url{http://qtnode.net/wiki/Qt4_with_Visual_Studio}

2)  Do not forget to put you Qt bin dir in the system path (i.e.
c:\Qt\4.2.2\bin), so you can use qmake anywhere, and to define the
QMAKESPEC env var, that for the case of MSVC2005 should be
win32-msvc2005.

3) open a MSVC2005 command prompt (you can find this in
Start->Programs->Microsoft Visual Studio->Visual Studio Tools); this cmd
prompt has all the env variables correctly configured in case you do not
have them configured in your system)

3) run "qconfigure msvc2005" (without the quotes) and follow the
instructions (basically reply yes whenever asked).

4) after the successful build of qmake and the subsequent generation
of the makefiles for the patched Qt code, just do nmake to build the
Qt lib (this will take a while, so go grab a coffee or something! ;-))

5) When done, you should now be able to create MSVC2005 project using
qmake -t vcapp/vclib from all your marsyas .pro!
@end example


@node Structure of distribution
@section Structure of distribution 

Marsyas is primarily targeted to researchers and software 
developers who want to build new systems and applications 
using existing building blocks. Therefore familiarity 
with the directory structure of the Marsyas distribution 
is important for any serious work with the framework. 

The main marsyas directory consists of the following 
important files: 

@c  TODO: update after fixing these files.  -gp
@itemize
@item @b{INSTALL, COPYING, THANKS, README, AUTHORS, TODO:} text
files with important information in theory.  However, these have not
been updated in years.
@item @b{ChangeLog:} the change log is not maintained as consistently 
as it should be but it still provides useful information about the 
evolution of the software. 
@item @b{configure.in, Makefile.am:} the main files edited by 
the user/programmer that are required for the autotools. You will 
only need to edit these if you are adding new subdirectories 
or configuration options to the distribution. 
@item @b{marsyasConfig.pri:} edit this file to select your configure
options when using qmake.
@item @b{marsyasAll.pro:} only developers should edit this file.
@end itemize 


@noindent
In addition there are the following subdirectories: 

@itemize 
@item @b{marsyas:} the main directory containing all the 
important source code of Marsyas. The source files in this 
subdirectory are compiled into a static library that other 
programs can use to access Marsyas functionality. 

@item @b{bin:} executable files are compiled in @file{bin/release} or
@file{bin/debug}.

@item @b{apps:} the source code for the above executables.

@c  We use doxygen?  Really!?  check.  -gp
@item @b{doc:} contains both the user manual (which you are 
currently reading) as well as the source code documentation
that is generated using doxygen. To regenerate the manual in pdf
or html type (in the doc subdirectory)

@example 
make pdf 
make html 
@end example 

@item @b{apps/Qt4Apps:} provides GUI interfaces using QT4. These will not
work with earlier versions of QT. You must have QT4 installed in order
to use or compile these applications. A README file is supplied with
each one that has instructions on how to compile and run it.

@item @b{config:} configuration files used by autotools.

@c @item @b{distributed:} Experimental Marsyas classes for
@c distributed processing.

@c @item @b{marsyasMATLAB:} User MATLAB scripts (mfiles).

@end itemize 


