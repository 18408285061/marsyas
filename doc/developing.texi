@node Developing MarSystems
@chapter Developing MarSystems

@menu
* Writing your own MarSystems::  
@end menu


@node Writing your own MarSystems
@section Writing your own MarSystems

It's relatively straightforward to extend Marsyas by writing your own
Marsystems. As mentioned before each MarSystems must basically support
the process method that handles the dataflow and the update method that
handles the control messages.  There are certain conventions that need
to be followed so typically it is a better idea to copy and modify an
existing Marsystem rather than writing one from scratch. The simple
canonical example of a MarSystem that is what I use as a template when I
write a new Marsystem is @file{Gain.h} and @file{Gain.cpp}  or
@file{MarSystemTemplateBasic .h .cpp}.

The new MarSystem should be placed in the @file{marsyas/} directory, and
must be added to @file{MarSystemManager.cpp} and the build process.
Again, the easiest way is to look for @code{Gain} and do the same thing
with your new MarSystem.  There are four files which require attention:

@itemize
@item @file{marsyas/MarSystemManager.cpp}
@item @file{marsyas/marsyas.pro}
@item @file{marsyas/Makefile.am}
@item @file{lib/release/Makefile.am}
@end itemize

Once you have edited these files, recompile marsyas (with automake:
@code{automake}, @code{./configure}, @code{make}, @code{make install}.
With qmake, just run @code{qmake}), then @code{make}, and @code{make
install}.)



