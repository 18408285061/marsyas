@node Programming Applications
@chapter Programming Applications

@menu
* Including libraries and linking::  
* Example programs::            
* Other programming issues::    
@end menu


@node Including libraries and linking
@section Including libraries and linking

@cindex Compiling
@cindex Linking
To use any marsyas code in your program(s), you need to include the
Marsyas libraries in your project.


@subsection Linux and other *nixes (including Cygwin)

The easiest way to compile Marsyas projects is to use a makefile.  In your
working directory, create a file called @file{Makefile} which contains

@example
all:
	rm -f *.o
	g++ -Wall -O2 -I./ -I/usr/local/include/marsyas -c -o myfile.o myfile.cpp
	g++ -Lusr/local/lib -o myfile myfile.o -lmarsyas -lasound
@end example

@noindent
(place a tab in front of the three lower lines instead of spaces)

If you installed marsyas in a location other than @file{/usr/local/}, then
change the @code{-I} and @code{-L} directories accordingly.  For example,
if you installed marsyas in @file{$@{HOME@}/usr/}, then you would use
@code{-I$@{HOME@}/usr/include/marsyas} and @code{-L$@{HOME@}/usr/lib}.  Once
the @file{Makefile} is written, simply type @code{make} to compile
your file.



@subsection MacOS X

To compile Marsyas projects in OSX, use the same @file{Makefile} as is used
in other *nixes, but replace the final line with

@example
	g++ -Lusr/local/lib -o myfile myfile.o -lmarsyas -framework CoreAudio \
		-framework CoreMidi -framework CoreFoundation
@end example


@subsection Windows Visual Studio

Please see the documentation for your compiler / development environment.
@c alternately, Gustavo could write something here.  :)


@node Example programs
@section Example programs

The most efficient way to learn how to write programs that use MarSystem
is to read these examples.  We recommend that you use these examples as
templates when you begin to write your own programs.

@menu
* Hello World (playing an audio file)::  
* Reading and altering controls::  
* Writing data to text files::  
* Getting data from the network::  
* Command-line options::        
@end menu



@node Hello World (playing an audio file)
@subsection Hello World (playing an audio file)

@cindex Hello world
@cindex Playing an audio file

Instead of printing @qq{Hello World!}, we shall play a sound file.  This is
relatively straightforward: we create a @code{MarSystem} which is a
series of @code{SoundFileSource}, @code{Gain}, and @code{AudioSink}.  Once
the network is created and the controls are given, we call @code{tick()} to
make time pass until we have finished playing the file.

@examplefile{helloworld.cpp}


@node Reading and altering controls
@subsection Reading and altering controls

Here we have modified the example from the previous section: we have added
the ability to start at an arbitrary position (time) inside the audio file.
To calculate the starting position in the file, we must know the sample rate
and number of channels.  We get this information from the
@code{SoundFileSource} with @code{getctrl}.

@examplefile{controls.cpp}


@node Writing data to text files
@subsection Writing data to text files

Extract data from a network for further analysis (plotting,
other programs, etc) is fairly easy to do with @code{PlotSink}.

@examplefile{writefile.cpp}


@node Getting data from the network
@subsection Getting data from the network

Putting together a network of MarSystems is all well and good,
but you probably want to do something with that data.  In this
example we simply print it to the screen, but the important
thing to note is that we have the data at the level of C programming.

@examplefile{gettingdata.cpp}




@node Command-line options
@subsection Command-line options

Getting options from the command-line is fairly easy; Marsyas provides
a handy object which parses the command-line for you.

@examplefile{commandOptions.cpp}


@node Other programming issues
@section Other programming issues

@menu
* Scheduler::                   
* Visualizing data with gnuplot::  
@end menu


@node Scheduler
@subsection Scheduler

To schedule events using the new scheduler code, see the
Marsyas Expression Syntax documentation at
@uref{http://www.cs.uvic.ca/~inb/work/expr.html}


@node Visualizing data with gnuplot
@subsection Visualizing data with gnuplot

Gnuplot is an open-source data plotting utility available on every
operating system that Marsyas supports.  More information (including
downloads and installation instructions) can be found on the
@uref{http://www.gnuplot.info/,Gnuplot website}.

Data in Marsyas can be plotted easily: simply write the realvec to
a text file and call gnuplot on the result.

@example
void someFunction() @{
  string filename = "dataToPlot.txt";
	realvec data;
	data.allocate(size);
// ... do whatever processing here...
  data.writeText( filename );
  data.~realvec();
@}
@end example

After compiling and running the program, the @code{dataToPlot.txt} file
may be plotted with gnuplot.

@example
gnuplot> plot "dataToPlot.txt"
@end example

