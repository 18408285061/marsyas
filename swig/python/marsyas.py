# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _marsyas
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _marsyas.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _marsyas.PySwigIterator_value(*args)
    def incr(*args): return _marsyas.PySwigIterator_incr(*args)
    def decr(*args): return _marsyas.PySwigIterator_decr(*args)
    def distance(*args): return _marsyas.PySwigIterator_distance(*args)
    def equal(*args): return _marsyas.PySwigIterator_equal(*args)
    def copy(*args): return _marsyas.PySwigIterator_copy(*args)
    def next(*args): return _marsyas.PySwigIterator_next(*args)
    def previous(*args): return _marsyas.PySwigIterator_previous(*args)
    def advance(*args): return _marsyas.PySwigIterator_advance(*args)
    def __eq__(*args): return _marsyas.PySwigIterator___eq__(*args)
    def __ne__(*args): return _marsyas.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _marsyas.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _marsyas.PySwigIterator___isub__(*args)
    def __add__(*args): return _marsyas.PySwigIterator___add__(*args)
    def __sub__(*args): return _marsyas.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _marsyas.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class Map_String_MarControlPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Map_String_MarControlPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Map_String_MarControlPtr, name)
    __repr__ = _swig_repr
    def iterator(*args): return _marsyas.Map_String_MarControlPtr_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _marsyas.Map_String_MarControlPtr___nonzero__(*args)
    def __len__(*args): return _marsyas.Map_String_MarControlPtr___len__(*args)
    def __getitem__(*args): return _marsyas.Map_String_MarControlPtr___getitem__(*args)
    def __delitem__(*args): return _marsyas.Map_String_MarControlPtr___delitem__(*args)
    def has_key(*args): return _marsyas.Map_String_MarControlPtr_has_key(*args)
    def keys(*args): return _marsyas.Map_String_MarControlPtr_keys(*args)
    def values(*args): return _marsyas.Map_String_MarControlPtr_values(*args)
    def items(*args): return _marsyas.Map_String_MarControlPtr_items(*args)
    def __contains__(*args): return _marsyas.Map_String_MarControlPtr___contains__(*args)
    def key_iterator(*args): return _marsyas.Map_String_MarControlPtr_key_iterator(*args)
    def value_iterator(*args): return _marsyas.Map_String_MarControlPtr_value_iterator(*args)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args): return _marsyas.Map_String_MarControlPtr___setitem__(*args)
    def __init__(self, *args): 
        this = _marsyas.new_Map_String_MarControlPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _marsyas.Map_String_MarControlPtr_empty(*args)
    def size(*args): return _marsyas.Map_String_MarControlPtr_size(*args)
    def clear(*args): return _marsyas.Map_String_MarControlPtr_clear(*args)
    def swap(*args): return _marsyas.Map_String_MarControlPtr_swap(*args)
    def get_allocator(*args): return _marsyas.Map_String_MarControlPtr_get_allocator(*args)
    def begin(*args): return _marsyas.Map_String_MarControlPtr_begin(*args)
    def end(*args): return _marsyas.Map_String_MarControlPtr_end(*args)
    def rbegin(*args): return _marsyas.Map_String_MarControlPtr_rbegin(*args)
    def rend(*args): return _marsyas.Map_String_MarControlPtr_rend(*args)
    def count(*args): return _marsyas.Map_String_MarControlPtr_count(*args)
    def erase(*args): return _marsyas.Map_String_MarControlPtr_erase(*args)
    def find(*args): return _marsyas.Map_String_MarControlPtr_find(*args)
    def lower_bound(*args): return _marsyas.Map_String_MarControlPtr_lower_bound(*args)
    def upper_bound(*args): return _marsyas.Map_String_MarControlPtr_upper_bound(*args)
    __swig_destroy__ = _marsyas.delete_Map_String_MarControlPtr
    __del__ = lambda self : None;
Map_String_MarControlPtr_swigregister = _marsyas.Map_String_MarControlPtr_swigregister
Map_String_MarControlPtr_swigregister(Map_String_MarControlPtr)

class MarSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarSystem, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def tick(*args): return _marsyas.MarSystem_tick(*args)
    def update(*args): return _marsyas.MarSystem_update(*args)
    def addMarSystem(*args): return _marsyas.MarSystem_addMarSystem(*args)
    def getType(*args): return _marsyas.MarSystem_getType(*args)
    def getName(*args): return _marsyas.MarSystem_getName(*args)
    def getPrefix(*args): return _marsyas.MarSystem_getPrefix(*args)
    def setControl(*args): return _marsyas.MarSystem_setControl(*args)
    def updControl(*args): return _marsyas.MarSystem_updControl(*args)
    def getControl(*args): return _marsyas.MarSystem_getControl(*args)
    def hasControl(*args): return _marsyas.MarSystem_hasControl(*args)
    def linkControl(*args): return _marsyas.MarSystem_linkControl(*args)
    def getControls(*args): return _marsyas.MarSystem_getControls(*args)
    __swig_destroy__ = _marsyas.delete_MarSystem
    __del__ = lambda self : None;
MarSystem_swigregister = _marsyas.MarSystem_swigregister
MarSystem_swigregister(MarSystem)

class Vector_String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_String, name)
    __repr__ = _swig_repr
    def iterator(*args): return _marsyas.Vector_String_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _marsyas.Vector_String___nonzero__(*args)
    def __len__(*args): return _marsyas.Vector_String___len__(*args)
    def pop(*args): return _marsyas.Vector_String_pop(*args)
    def __getslice__(*args): return _marsyas.Vector_String___getslice__(*args)
    def __setslice__(*args): return _marsyas.Vector_String___setslice__(*args)
    def __delslice__(*args): return _marsyas.Vector_String___delslice__(*args)
    def __delitem__(*args): return _marsyas.Vector_String___delitem__(*args)
    def __getitem__(*args): return _marsyas.Vector_String___getitem__(*args)
    def __setitem__(*args): return _marsyas.Vector_String___setitem__(*args)
    def append(*args): return _marsyas.Vector_String_append(*args)
    def empty(*args): return _marsyas.Vector_String_empty(*args)
    def size(*args): return _marsyas.Vector_String_size(*args)
    def clear(*args): return _marsyas.Vector_String_clear(*args)
    def swap(*args): return _marsyas.Vector_String_swap(*args)
    def get_allocator(*args): return _marsyas.Vector_String_get_allocator(*args)
    def begin(*args): return _marsyas.Vector_String_begin(*args)
    def end(*args): return _marsyas.Vector_String_end(*args)
    def rbegin(*args): return _marsyas.Vector_String_rbegin(*args)
    def rend(*args): return _marsyas.Vector_String_rend(*args)
    def pop_back(*args): return _marsyas.Vector_String_pop_back(*args)
    def erase(*args): return _marsyas.Vector_String_erase(*args)
    def __init__(self, *args): 
        this = _marsyas.new_Vector_String(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _marsyas.Vector_String_push_back(*args)
    def front(*args): return _marsyas.Vector_String_front(*args)
    def back(*args): return _marsyas.Vector_String_back(*args)
    def assign(*args): return _marsyas.Vector_String_assign(*args)
    def resize(*args): return _marsyas.Vector_String_resize(*args)
    def insert(*args): return _marsyas.Vector_String_insert(*args)
    def reserve(*args): return _marsyas.Vector_String_reserve(*args)
    def capacity(*args): return _marsyas.Vector_String_capacity(*args)
    __swig_destroy__ = _marsyas.delete_Vector_String
    __del__ = lambda self : None;
Vector_String_swigregister = _marsyas.Vector_String_swigregister
Vector_String_swigregister(Vector_String)

class MarSystemManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarSystemManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarSystemManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _marsyas.new_MarSystemManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def create(*args): return _marsyas.MarSystemManager_create(*args)
    def registeredPrototypes(*args): return _marsyas.MarSystemManager_registeredPrototypes(*args)
    __swig_destroy__ = _marsyas.delete_MarSystemManager
    __del__ = lambda self : None;
MarSystemManager_swigregister = _marsyas.MarSystemManager_swigregister
MarSystemManager_swigregister(MarSystemManager)

class MarControlPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarControlPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarControlPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _marsyas.new_MarControlPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _marsyas.delete_MarControlPtr
    __del__ = lambda self : None;
    def isInvalid(*args): return _marsyas.MarControlPtr_isInvalid(*args)
    __swig_getmethods__["from_natural"] = lambda x: _marsyas.MarControlPtr_from_natural
    if _newclass:from_natural = staticmethod(_marsyas.MarControlPtr_from_natural)
    __swig_getmethods__["from_real"] = lambda x: _marsyas.MarControlPtr_from_real
    if _newclass:from_real = staticmethod(_marsyas.MarControlPtr_from_real)
    __swig_getmethods__["from_bool"] = lambda x: _marsyas.MarControlPtr_from_bool
    if _newclass:from_bool = staticmethod(_marsyas.MarControlPtr_from_bool)
    __swig_getmethods__["from_string"] = lambda x: _marsyas.MarControlPtr_from_string
    if _newclass:from_string = staticmethod(_marsyas.MarControlPtr_from_string)
    def getType(*args): return _marsyas.MarControlPtr_getType(*args)
    def getName(*args): return _marsyas.MarControlPtr_getName(*args)
    def setValue_natural(*args): return _marsyas.MarControlPtr_setValue_natural(*args)
    def setValue_real(*args): return _marsyas.MarControlPtr_setValue_real(*args)
    def setValue_bool(*args): return _marsyas.MarControlPtr_setValue_bool(*args)
    def setValue_string(*args): return _marsyas.MarControlPtr_setValue_string(*args)
    def to_natural(*args): return _marsyas.MarControlPtr_to_natural(*args)
    def to_real(*args): return _marsyas.MarControlPtr_to_real(*args)
    def to_string(*args): return _marsyas.MarControlPtr_to_string(*args)
    def to_bool(*args): return _marsyas.MarControlPtr_to_bool(*args)
MarControlPtr_swigregister = _marsyas.MarControlPtr_swigregister
MarControlPtr_swigregister(MarControlPtr)
MarControlPtr_from_natural = _marsyas.MarControlPtr_from_natural
MarControlPtr_from_real = _marsyas.MarControlPtr_from_real
MarControlPtr_from_bool = _marsyas.MarControlPtr_from_bool
MarControlPtr_from_string = _marsyas.MarControlPtr_from_string

class realvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, realvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, realvec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _marsyas.new_realvec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _marsyas.delete_realvec
    __del__ = lambda self : None;
    def maxval(*args): return _marsyas.realvec_maxval(*args)
    def minval(*args): return _marsyas.realvec_minval(*args)
    def mean(*args): return _marsyas.realvec_mean(*args)
    def median(*args): return _marsyas.realvec_median(*args)
    def sum(*args): return _marsyas.realvec_sum(*args)
    def std(*args): return _marsyas.realvec_std(*args)
    def var(*args): return _marsyas.realvec_var(*args)
    def sort(*args): return _marsyas.realvec_sort(*args)
    def abs(*args): return _marsyas.realvec_abs(*args)
    def sqr(*args): return _marsyas.realvec_sqr(*args)
    def sqroot(*args): return _marsyas.realvec_sqroot(*args)
    def normMaxMin(*args): return _marsyas.realvec_normMaxMin(*args)
    def stretch(*args): return _marsyas.realvec_stretch(*args)
    def setval(*args): return _marsyas.realvec_setval(*args)
    def appendRealvec(*args): return _marsyas.realvec_appendRealvec(*args)
    def apply(*args): return _marsyas.realvec_apply(*args)
    def norm(*args): return _marsyas.realvec_norm(*args)
    def renorm(*args): return _marsyas.realvec_renorm(*args)
    def getSubVector(*args): return _marsyas.realvec_getSubVector(*args)
    def covariance(*args): return _marsyas.realvec_covariance(*args)
    def covariance2(*args): return _marsyas.realvec_covariance2(*args)
    def search(*args): return _marsyas.realvec_search(*args)
    def __len__(*args): return _marsyas.realvec___len__(*args)
    def __getitem__(*args): return _marsyas.realvec___getitem__(*args)
    def __setitem__(*args): return _marsyas.realvec___setitem__(*args)
realvec_swigregister = _marsyas.realvec_swigregister
realvec_swigregister(realvec)



