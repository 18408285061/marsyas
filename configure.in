# @start 1
# configure.in -- Process this file with autoconf to produce configure
# @start 2
# Copyright (C) 1998-2004 George Tzanetakis
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



# Process this file with autoconf to produce a configure script.
AC_INIT([marsyas], [0.2.8], [gtzan@cs.uvic.ca])
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM
AM_CONFIG_HEADER(marsyas/config.h)
AM_INIT_AUTOMAKE([marsyas], [0.2.8])


#Default CXXFLAGS
MRS_DEFAULT_CXXFLAGS="-O3 -Wall"
if test "x$CXXFLAGS" == "x"; then 
	CXXFLAGS="$MRS_DEFAULT_CXXFLAGS" 
fi
AC_PROG_CC
AC_PROG_CXX 
AC_SUBST(ac_aux_dir)
AC_PROG_RANLIB


# Check arguments 

AC_ARG_ENABLE([assert],[AC_HELP_STRING([--enable-assert],[Turn assertions on])])
case "$enable_assert" in
      yes)
               AC_DEFINE([MRSASSERTE],[1],[Enable Marsyas Assertions])
               echo Assertions enabled
       ;;
       *) echo Assertions disabled ;;
esac


AC_ARG_ENABLE([diagnostics],[AC_HELP_STRING([--enable-diagnostics],[Turn diagnostics on])])
case "$enable_diagnostics" in
       yes)
               AC_DEFINE([MRSDIAGNOSTIC],[1],[Enable Marsyas Diagnostics])
               echo Diagnostics enabled
       ;;
       *) echo Diagnostics disabled ;;
esac


AC_ARG_ENABLE([warnings],[AC_HELP_STRING([--enable-warnings],[Turn warnings on])], [enable_warnings=$enableval], [enable_warnings=yes])
case "$enable_warnings" in
       yes)
               AC_DEFINE([MRSWARNING],[1], [Enable Marsyas Warnings])
               echo Warnings enabled
       ;;
       *) echo Warnings disabled ;;
esac



AC_ARG_ENABLE([audio],[AC_HELP_STRING([--enable-audio],[Enable Audio IO])], [enable_audio=$enableval], [enable_audio=yes])
case "$enable_audio" in
       yes)
               AC_DEFINE([MRSAUDIO],[1], [Enable Audio IO])
               echo Audio enabled
       ;;
       *) echo Audio disabled 
	;;
esac


AC_ARG_ENABLE([midi],[AC_HELP_STRING([--enable-midi],[Enable MIDI IO])], [enable_midi=$enableval], [enable_midi=yes])
case "$enable_midi" in
       yes)
               AC_DEFINE([MRSMIDI],[1], [Enable MIDI IO])
               echo MIDI enabled
       ;;
       *) echo MIDI disabled 
	;;
esac

AC_ARG_ENABLE([debug],[AC_HELP_STRING([--enable-debug],[Compile for debugging with gdb])])
case "$enable_debug" in
       yes)
               CXXFLAGS="-O0 -g -ggdb"
               echo Debugging enabled
       ;;
       *) echo Debugging disabled ;;
esac


AC_ARG_ENABLE([distributed],[AC_HELP_STRING([--enable-distributed],[Compile code for distributed audio processing (experimental)])])
DISTRIBUTED=
case "$enable_distributed" in
       yes)
               DISTRIBUTED="distributed"
               echo Distributed support enabled
       ;;
       *) echo Distributed support disabled ;;
esac
AC_SUBST([DISTRIBUTED])
 

AC_ARG_ENABLE(oss, [  --enable-oss         Linux OSS audio system], enable_oss=$enableval, enable_oss=no)


AC_ARG_WITH([mad],[AC_HELP_STRING([--with-mad],[Link to libmad (mp3 audio decoder)])])
MADLIB=""
case "x$with_mad" in
       xyes)
               MADLIB="-lmad"
               AC_DEFINE([MAD_MP3],[1],[Enable mad mp3 decoding])
               echo Libmad MP3 decoding enabled
       ;;
       xno|x)  echo Libmad MP3 decoding disabled ;;
       *)
               # Passed a prefix for mad
               MADLIB="-L${with_mad}/lib -lmad"
               CPPFLAGS="$CPPFLAGS -I${with_mad}/include"
               AC_DEFINE([MAD_MP3],[1],[Enable mad mp3 decoding])
               echo Libmad MP3 decoding enabled
       ;;
esac
AC_SUBST([MADLIB])



AC_ARG_WITH([vorbis],[AC_HELP_STRING([--with-vorbis],[Link to libvorbis (ogg audio decoder)])])
OGGLIB=""
case "x$with_vorbis" in
       xyes)
               OGGLIB="-lvorbis -lvorbisfile"
               AC_DEFINE([OGG_VORBIS],[1],[Enable ogg vorbis decoding])
               echo Ogg vorbis decoding enabled
       ;;
       xno|x)  echo Ogg vorbis decoding disabled ;;
       *)
               OGGLIB="-L${with_ogg}/lib -lvorbis -lvorbisfile"
               CPPFLAGS="$CPPFLAGS -I${with_ogg}/include"
               AC_DEFINE([OGG_VORBIS],[1],[Enable ogg vorbis decoding])
               echo Ogg vorbis decoding enabled
       ;;
esac
AC_SUBST([OGGLIB])




AC_ARG_WITH([readline],[AC_HELP_STRING([--with-readline],[Readline functionality for Marsyas scriping language (MSL)])])
MslLibs=""
case "x$with_readline" in
       xyes)
               MslLibs="-lreadline -lcurses"
               AC_DEFINE([__WITHREADLINE__],[1],[Enable readline])
               echo Readline support enabled
       ;;
       xno|x) echo Readline support disabled ;;
       *)
               # Passed a prefix for readline
               MslLibs="-L${with_readline}/lib -lreadline -lcurses"
               CPPFLAGS="$CPPFLAGS -I${with_readline}/include"
               AC_DEFINE([__WITHREADLINE__],[1],[Enable readline])
               echo Readline support enabled
       ;;
esac
AC_SUBST([MslLibs])
 
AC_ARG_ENABLE([bindings],
              [AC_HELP_STRING([--enable-bindings],
                              [Enables SWIG generated bindings])
              ]
)

AC_CONFIG_SUBDIRS([swig])
MRSSWIG=
case "$enable_bindings" in
       yes)
               MRSSWIG="swig"
               echo SWIG bindings enabled
       ;;
       *) echo SWIG bindings disabled ;;
esac

AC_SUBST([MRSSWIG])







# System specific 

case "${host}" in
 	*-*-linux-gnu*) 


if test "$enable_oss" = yes; then 
	AC_DEFINE([__LINUX_OSS__],[1], [LINUX SYSTEM FOR RTAUDIO])	
	Libs="-lpthread ${MADLIB} ${OGGLIB}"
	echo "Using OSS audio"
else 
	case "$enable_audio" in 
	yes) 
	   AC_DEFINE([__LINUX_ALSA__],[1], [LINUX SYSTEM FOR RTAUDIO])	
	   AC_DEFINE([__LINUX_ALSASEQ__],[1], [LINUX SYSTEM FOR RTAUDIO])
	   Libs="-lpthread -lasound ${MADLIB} ${OGGLIB}"
	   echo "Using ALSA audio"

	;;
	*) 
	           Libs="-lpthread ${MADLIB} ${OGGLIB}"	
	;;
	esac
fi 
	AC_DEFINE([__OS_LINUX__],[1], [LINUX STUFF])
	;;



	powerpc-*-darwin*) 
	Libs="-lpthread -lobjc ${MADLIB} ${OGGLIB} -framework CoreAudio -framework CoreMidi -framework CoreFoundation"
	AC_DEFINE([__MACOSX_CORE__],[1], [MACOSX SYSTEM FOR RTAUDIO])		
	AC_DEFINE([__BIG_ENDIAN__], [1], [IS BIG ENDINA])
	AC_DEFINE([__OS_MACOSX__],[1], [MACOSX STUFF])
	;;
	i386-*-darwin*) 
	Libs="-lpthread ${MADLIB} ${OGGLIB} -framework CoreAudio -framework CoreMidi -framework CoreFoundation"
	AC_DEFINE([__MACOSX_CORE__],[1], [MACOSX SYSTEM FOR RTAUDIO])		
	AC_DEFINE([__OS_MACOSX__],[1], [MACOSX STUFF])
	;;
	i686-*-darwin*) 
	Libs="-lpthread ${MADLIB} ${OGGLIB} -framework CoreAudio -framework CoreMidi -framework CoreFoundation"
	AC_DEFINE([__MACOSX_CORE__],[1], [MACOSX SYSTEM FOR RTAUDIO])		
	AC_DEFINE([__OS_MACOSX__],[1], [MACOSX STUFF])
	;;
	*-*-cygwin*) 
	Libs="-lpthread -ldsound -lwinmm ${MADLIB} ${OGGLIB}"
	Includes="/usr/include/directx"
	AC_DEFINE([__WINDOWS_DS__],[1], [WINDOWS SYSTEM FOR RTAUDIO])		
	AC_DEFINE([__WINDOWS_MM__],[1], [WINDOWS SYSTEM FOR RTAUDIO])		
	AC_DEFINE([__CYGWIN__], [1], [CYGWIN FOR THREAD STUFF])
	AC_DEFINE([__OS_WINDOWS__RTMIDI__], [1], [WINDOWS SYSTEM FOR RTMIDI])
	AC_DEFINE([CYGWIN],[1], [WINDOWS STUFF])
	;;
esac



if test "x$prefix" = xNONE; then
   prefix="${ac_default_prefix}"
fi


AC_SUBST(Audio)
AC_SUBST(Libs)
AC_SUBST(Includes)
AC_SUBST(MslLibs)





AC_CONFIG_FILES([Makefile marsyas/Makefile src/Makefile src/plugins/Makefile src/tcl/Makefile distributed/Makefile doc/Makefile doc/marsyas/Makefile marsyasVisualStudio2003/Makefile marsyasVisualStudio2003/sfplay/Makefile marsyasVisualStudio2003/sfinfo/Makefile marsyasVisualStudio2003/phasevocoder/Makefile marsyasVisualStudio2003/marsyas/Makefile marsyasVisualStudio2003/sfplugin/Makefile marsyasVisualStudio2003/bextract/Makefile marsyasVisualStudio2003/extract/Makefile marsyasVisualStudio2003/classifyFile/Makefile marsyasVisualStudio2005/Makefile marsyasVisualStudio2005/marsyas/Makefile marsyasVisualStudio2005/sfplay/Makefile marsyasVisualStudio2005/sfinfo/Makefile marsyasVisualStudio2005/sfplugin/Makefile marsyasVisualStudio2005/phasevocoder/Makefile marsyasVisualStudio2005/bextract/Makefile marsyasVisualStudio2005/extract/Makefile marsyasVisualStudio2005/classifyFile/Makefile marsyasVisualStudio2005/Tutorial/Makefile marsyasVisualStudio2005/marsyasTests/Makefile marsyasVisualStudio2005/LPCExample/Makefile qt4GUIs/Makefile qt4GUIs/MarPlayer/Makefile qt4GUIs/MarPlayer/images/Makefile qt4GUIs/MarGrid/Makefile qt4GUIs/Marx2DGraph/Makefile qt4GUIs/MarxGLMultiBufferGraph/Makefile qt4GUIs/Marx2DGraphStacked/Makefile qt4GUIs/MarxGL2Din3DSpaceGraph/Makefile qt4GUIs/MarxGLGraph/Makefile marsyasMATLAB/Makefile], [test -z "$CONFIG_HEADERS" || echo timestamp > marsyas/stamp-h.in])

AC_OUTPUT
