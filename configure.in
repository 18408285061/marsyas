# @start 1
# configure.in -- Process this file with autoconf to produce configure
# @start 2
# Copyright (C) 1998-2004 George Tzanetakis
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



# Process this file with autoconf to produce a configure script.
AC_INIT([marsyas], [0.2.13], [gtzan@cs.uvic.ca])
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE([marsyas], [0.2.13])


#Default CXXFLAGS
MARSYAS_DEFAULT_CXXFLAGS="-O3 -Wall -fPIC"
if test "x$CXXFLAGS" == "x"; then 
	CXXFLAGS="$MARSYAS_DEFAULT_CXXFLAGS" 
fi
AC_PROG_CC
AC_PROG_CXX 
AC_SUBST(ac_aux_dir)
AC_PROG_RANLIB


# Check arguments 

AC_ARG_ENABLE([assert],[AC_HELP_STRING([--enable-assert],[Turn assertions on])])
case "$enable_assert" in
      yes)
               AC_DEFINE([MARSYAS_ASSERTS],[1],[Enable Marsyas
Assertions (small performance penalty)])
               echo Assertions enabled
       ;;
       *) echo Assertions disabled ;;
esac


AC_ARG_ENABLE([diagnostics],[AC_HELP_STRING([--enable-diagnostics],[Turn diagnostics on])])
case "$enable_diagnostics" in
       yes)
               AC_DEFINE([MARSYAS_LOG_DIAGNOSTICS],[1],[Enable Marsyas Diagnostics])
               echo Diagnostics enabled
       ;;
       *) echo Diagnostics disabled ;;
esac


AC_ARG_ENABLE([warnings],[AC_HELP_STRING([--enable-warnings],[Turn warnings on])], [enable_warnings=$enableval], [enable_warnings=yes])
case "$enable_warnings" in
       yes)
               AC_DEFINE([MARSYAS_LOG_WARNINGS],[1], [Enable Marsyas Warnings])
               echo Warnings enabled
       ;;
       *) echo Warnings disabled ;;
esac



AC_ARG_ENABLE([audio],[AC_HELP_STRING([--enable-audio],[Enable Audio IO])], [enable_audio=$enableval], [enable_audio=yes])
case "$enable_audio" in
       yes)
               AC_DEFINE([MARSYAS_AUDIOIO],[1], [Enable Audio IO])
               echo Audio enabled
       ;;
       *) echo Audio disabled 
	;;
esac

AC_ARG_ENABLE([oss],[AC_HELP_STRING([--enable-oss],[Use OSS audio
instead of ALSA (Linux)])])

AC_ARG_ENABLE([midi],[AC_HELP_STRING([--enable-midi],[Enable MIDI IO])], [enable_midi=$enableval], [enable_midi=yes])
case "$enable_midi" in
       yes)
               AC_DEFINE([MARSYAS_MIDIIO],[1], [Enable MIDI IO])
               echo MIDI enabled
       ;;
       *) echo MIDI disabled 
	;;
esac


AC_ARG_ENABLE([debug],[AC_HELP_STRING([--enable-debug],[Compile for
debugging with gdb (large performance penalty)])])
case "$enable_debug" in
       yes)
               AC_DEFINE([MARSYAS_LOG_DEBUGS],[1], [Enable DEBUG MESSAGES])
               CXXFLAGS="-O0 -g -ggdb "
               echo Debugging enabled
       ;;
       *) echo Debugging disabled ;;
esac

AC_ARG_ENABLE([profiling],[AC_HELP_STRING([--enable-profiling],[Compile for profiling])])
case "$enable_profiling" in
       yes)
               AC_DEFINE([MARSYAS_PROFILING],[1], [Enable PROFILING])
               CXXFLAGS="$CXXFLAGS -pg"
               echo Profiling enabled
       ;;
       *) echo Profiling disabled ;;
esac

AC_ARG_ENABLE([log2file],[AC_HELP_STRING([--enable-log2file],[Log
messages to a file])])
case "$enable_log2file" in
       yes)
               AC_DEFINE([MARSYAS_LOG2FILE],[1], [Log to file])
               echo Log messages will be written to a file
       ;;
       *) echo Log messages will not be written to a file ;;
esac

AC_ARG_ENABLE([log2stdout],[AC_HELP_STRING([--enable-log2stdout],[Log
messages to stdout])],[enable_log2stdout=$enableval],[enable_log2stdout=yes])
case "$enable_log2stdout" in
       yes)
               AC_DEFINE([MARSYAS_LOG2STDOUT],[1], [Log to stdout])
               echo Log messages will be written to stdout
       ;;
       *) echo Log messages will not be written to stdout ;;
esac

AC_ARG_ENABLE([log2gui],[AC_HELP_STRING([--enable-log2GUI],[Log
messages to GUI])])
case "$enable_log2gui" in
       yes)
               AC_DEFINE([MARSYAS_LOG2GUI],[1], [Log to GUI])
               echo Log messages will be written to GUI
       ;;
       *) echo Log messages will not be written to GUI ;;
esac






AC_ARG_ENABLE([distributed],[AC_HELP_STRING([--enable-distributed],[Compile code for distributed audio processing (experimental)])])
DISTRIBUTED=
case "$enable_distributed" in
       yes)
               DISTRIBUTED="distributed"
               echo Distributed support enabled
       ;;
       *) echo Distributed support disabled ;;
esac
AC_SUBST([DISTRIBUTED])




AC_ARG_WITH([mad],[AC_HELP_STRING([--with-mad],[Link to libmad (mp3
audio decoder) (must be installed)])])
MADLIB=""
case "x$with_mad" in
       xyes)
               MADLIB="-lmad"
               AC_DEFINE([MARSYAS_MAD],[1],[Enable mad mp3 decoding])
               echo Libmad MP3 decoding enabled
       ;;
       xno|x)  echo Libmad MP3 decoding disabled ;;
       *)
               # Passed a prefix for mad
               MADLIB="-L${with_mad}/lib -lmad"
               CPPFLAGS="$CPPFLAGS -I${with_mad}/include"
               AC_DEFINE([MARSYAS_MAD],[1],[Enable mad mp3 decoding])
               echo Libmad MP3 decoding enabled
       ;;
esac
AC_SUBST([MADLIB])



AC_ARG_WITH([vorbis],[AC_HELP_STRING([--with-vorbis],[Link to libvorbis (ogg audio decoder)])])
OGGLIB=""
case "x$with_vorbis" in
       xyes)
               OGGLIB="-lvorbis -lvorbisfile"
               AC_DEFINE([OGG_VORBIS],[1],[Enable ogg vorbis decoding])
               echo Ogg vorbis decoding enabled
       ;;
       xno|x)  echo Ogg vorbis decoding disabled ;;
       *)
               OGGLIB="-L${with_ogg}/lib -lvorbis -lvorbisfile"
               CPPFLAGS="$CPPFLAGS -I${with_ogg}/include"
               AC_DEFINE([OGG_VORBIS],[1],[Enable ogg vorbis decoding])
               echo Ogg vorbis decoding enabled
       ;;
esac
AC_SUBST([OGGLIB])









AC_ARG_WITH([readline],[AC_HELP_STRING([--with-readline],[Readline functionality for Marsyas scriping language (MSL)])])
MslLibs=""
case "x$with_readline" in
       xyes)
               MslLibs="-lreadline -lcurses"
               AC_DEFINE([MARSYAS_READLINE],[1],[Enable readline])
               echo Readline support enabled
       ;;
       xno|x) echo Readline support disabled ;;
       *)
               # Passed a prefix for readline
               MslLibs="-L${with_readline}/lib -lreadline -lcurses"
               CPPFLAGS="$CPPFLAGS -I${with_readline}/include"
               AC_DEFINE([MARSYAS_READLINE],[1],[Enable readline])
               echo Readline support enabled
       ;;
esac
AC_SUBST([MslLibs])
 
AC_ARG_ENABLE([bindings],
              [AC_HELP_STRING([--enable-bindings],
                              [Enables SWIG generated bindings])
              ]
)


AC_ARG_WITH([matlab],[AC_HELP_STRING([--with-matlab],[Activate MATLAB engine interface])])
MATLABLIBS=""
case "x$with_matlab" in
       xyes)
               MATLABLIBS="-L${MATLAB}/bin/maci -L${MATLAB}/sys/os/maci -leng -lmx -lut -lmat -licudata -licuuc -licui18n -licuio -lz -lhdf5"
	       INCLUDES="-I${MATLAB}/extern/include" 
               AC_DEFINE([MARSYAS_MATLAB],[1],[Activate MATLAB engine interface])
               echo MATLAB engine activated 
       ;;
       xno|x)  echo MATLAB engine not activated ;;
       *)
               # Passed a prefix for MATLAB
               MATLABLIB="-L${with_matlab}/bin/maci -L${MATLAB}/sys/os/maci -leng -lmx -lut -lmat -licudata -licuuc -licui18n -licuio -lz -lhdf5"
	       INCLUDES="-I${MATLAB}/extern/include"
               AC_DEFINE([MARSYAS_MATLAB],[1],[Activate MATLAB engine interface])
               echo MATLAB engine activated 
       ;;
esac
AC_SUBST([MATLABLIBS])











# System specific

#  cpu config
case "${host}" in
	powerpc-*) 
	AC_DEFINE([MARSYAS_BIGENDIAN], [1], [IS BIG ENDIAN])
	AC_DEFINE([__BIG_ENDIAN__], [1], [IS BIG ENDIAN])
	;;
	i386-*) 
	;;
	i686-*) 
	;;
	esac

#  operating system config
case "${host}" in
 	*-*-linux-gnu*) 
	AC_DEFINE([MARSYAS_LINUX])




if test "$enable_oss" = yes; then 
	AC_DEFINE([__LINUX_OSS__],[1], [LINUX SYSTEM FOR RTAUDIO])	
	Libs="-lpthread ${MADLIB} ${MATLABLIBS} ${OGGLIB}"
	echo "Using OSS audio"
else 
	case "$enable_audio" in 
	yes)
       AC_CHECK_HEADERS([alsa/asoundlib.h])
	   AC_DEFINE([__LINUX_ALSA__],[1], [LINUX SYSTEM FOR RTAUDIO])	
	   AC_DEFINE([__LINUX_ALSASEQ__],[1], [LINUX SYSTEM FOR RTAUDIO])
	   Libs="-lpthread -lasound ${MADLIB} ${MATLABLIBS} ${OGGLIB}"
	   echo "Using ALSA audio"

	;;
	*) 
	           Libs="-lpthread ${MADLIB} ${OGGLIB}"	
	;;
	esac
fi 
	AC_DEFINE([__OS_LINUX__],[1], [LINUX STUFF])
	;;



	*-*-darwin*) 
	Libs="-lpthread ${MADLIB} ${OGGLIB} ${MATLABLIBS} -framework CoreAudio -framework CoreMidi -framework CoreFoundation"
	AC_DEFINE([MARSYAS_MACOSX],[1], [MACOSX SYSTEM])		
	AC_DEFINE([__MACOSX_CORE__],[1], [MACOSX SYSTEM FOR RTAUDIO])		
	;;
	*-*-cygwin*) 
	AC_DEFINE([MARSYAS_CYGWIN])
	Libs="-lpthread -ldsound -lwinmm ${MADLIB} ${OGGLIB} ${MATLABLIBS}"
	# INCLUDES="$INCLUDES /usr/include/directx"
	AC_DEFINE([__WINDOWS_DS__],[1], [WINDOWS SYSTEM FOR RTAUDIO])		
	AC_DEFINE([__WINDOWS_MM__],[1], [WINDOWS SYSTEM FOR RTAUDIO])		
	AC_DEFINE([__CYGWIN__], [1], [CYGWIN FOR THREAD STUFF])
	AC_DEFINE([__OS_WINDOWS__RTMIDI__], [1], [WINDOWS SYSTEM FOR RTMIDI])
	AC_DEFINE([CYGWIN],[1], [WINDOWS STUFF])
	;;
esac


AC_ARG_ENABLE([marsyasqt],[AC_HELP_STRING([--enable-marsyasqt],[Enable building libmarsyasqt]),[enable_marsyas=$enableval],[enable_marsyasqt="no"]])
case "$enable_marsyasqt" in
       yes)
        AC_CHECK_PROG(qmake, [qmake], yes, no)
		if test $qmake = yes; then
			AM_CONDITIONAL(QT_PRESENT, true)
		else
			AM_CONDITIONAL(QT_PRESENT, false)
		fi
       ;;
       *)
               AM_CONDITIONAL(QT_PRESENT, false)
               echo Libmarsyasqt disabled
		;;
esac



if test "x$prefix" = xNONE; then
   prefix="${ac_default_prefix}"
fi


AC_SUBST(Audio)
AC_SUBST(Libs)
AC_SUBST(INCLUDES)
AC_SUBST(MslLibs)





AC_CONFIG_FILES([Makefile
		 src/Makefile
		 src/marsyas/Makefile
		 src/examples/Makefile
		 src/apps/Makefile
		 src/apps/sfplay/Makefile
		 src/apps/sfinfo/Makefile
		 lib/Makefile 
		 lib/debug/Makefile
		 lib/release/Makefile
		 doc/Makefile
		 scripts/Makefile
		 regressionTests/Makefile
		 regressionTests/input/Makefile
		 regressionTests/answers/Makefile
		 misc/Makefile
		 bin/Makefile
		 bin/debug/Makefile
		 bin/release/Makefile])
		 
		 

AC_OUTPUT
